// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "editor_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace whensunset {
namespace editorsdk {
namespace model {

void protobuf_ShutdownFile_editor_5fmodel_2eproto() {
  delete TimeRange::default_instance_;
  delete MediaStreamHolder::default_instance_;
  delete FileHolder::default_instance_;
  delete Color::default_instance_;
  delete VideoAsset::default_instance_;
  delete AudioAsset::default_instance_;
  delete VideoWorkspace::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_editor_5fmodel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_editor_5fmodel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_editor_5fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TimeRange::default_instance_ = new TimeRange();
  MediaStreamHolder::default_instance_ = new MediaStreamHolder();
  FileHolder::default_instance_ = new FileHolder();
  Color::default_instance_ = new Color();
  VideoAsset::default_instance_ = new VideoAsset();
  AudioAsset::default_instance_ = new AudioAsset();
  VideoWorkspace::default_instance_ = new VideoWorkspace();
  TimeRange::default_instance_->InitAsDefaultInstance();
  MediaStreamHolder::default_instance_->InitAsDefaultInstance();
  FileHolder::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  VideoAsset::default_instance_->InitAsDefaultInstance();
  AudioAsset::default_instance_->InitAsDefaultInstance();
  VideoWorkspace::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_editor_5fmodel_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_editor_5fmodel_2eproto_once_);
void protobuf_AddDesc_editor_5fmodel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_editor_5fmodel_2eproto_once_,
                 &protobuf_AddDesc_editor_5fmodel_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_editor_5fmodel_2eproto {
  StaticDescriptorInitializer_editor_5fmodel_2eproto() {
    protobuf_AddDesc_editor_5fmodel_2eproto();
  }
} static_descriptor_initializer_editor_5fmodel_2eproto_;
#endif
bool AssetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool VideoEncoderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRange::kStartFieldNumber;
const int TimeRange::kDurationFieldNumber;
const int TimeRange::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRange::TimeRange()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.editorsdk.model.TimeRange)
}

void TimeRange::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimeRange::TimeRange(const TimeRange& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.editorsdk.model.TimeRange)
}

void TimeRange::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  start_ = 0;
  duration_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:whensunset.editorsdk.model.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeRange& TimeRange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_editor_5fmodel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fmodel_2eproto();
#endif
  return *default_instance_;
}

TimeRange* TimeRange::default_instance_ = NULL;

TimeRange* TimeRange::New(::google::protobuf::Arena* arena) const {
  TimeRange* n = new TimeRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.editorsdk.model.TimeRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, id_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.editorsdk.model.TimeRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_duration;
        break;
      }

      // optional double duration = 2;
      case 2: {
        if (tag == 17) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.editorsdk.model.TimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.editorsdk.model.TimeRange)
  return false;
#undef DO_
}

void TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.editorsdk.model.TimeRange)
  // optional double start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start(), output);
  }

  // optional double duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  // optional uint64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.editorsdk.model.TimeRange)
}

int TimeRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.editorsdk.model.TimeRange)
  int total_size = 0;

  // optional double start = 1;
  if (this->start() != 0) {
    total_size += 1 + 8;
  }

  // optional double duration = 2;
  if (this->duration() != 0) {
    total_size += 1 + 8;
  }

  // optional uint64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeRange*>(&from));
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.editorsdk.model.TimeRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.editorsdk.model.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {

  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeRange::InternalSwap(TimeRange* other) {
  std::swap(start_, other->start_);
  std::swap(duration_, other->duration_);
  std::swap(id_, other->id_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimeRange::GetTypeName() const {
  return "whensunset.editorsdk.model.TimeRange";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeRange

// optional double start = 1;
void TimeRange::clear_start() {
  start_ = 0;
}
 double TimeRange::start() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.TimeRange.start)
  return start_;
}
 void TimeRange::set_start(double value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.TimeRange.start)
}

// optional double duration = 2;
void TimeRange::clear_duration() {
  duration_ = 0;
}
 double TimeRange::duration() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.TimeRange.duration)
  return duration_;
}
 void TimeRange::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.TimeRange.duration)
}

// optional uint64 id = 3;
void TimeRange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimeRange::id() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.TimeRange.id)
  return id_;
}
 void TimeRange::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.TimeRange.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaStreamHolder::kWidthFieldNumber;
const int MediaStreamHolder::kHeightFieldNumber;
const int MediaStreamHolder::kCodecTypeFieldNumber;
const int MediaStreamHolder::kRotationFieldNumber;
const int MediaStreamHolder::kPixFormatFieldNumber;
const int MediaStreamHolder::kColorSpaceFieldNumber;
const int MediaStreamHolder::kColorRangeFieldNumber;
const int MediaStreamHolder::kBitRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaStreamHolder::MediaStreamHolder()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.editorsdk.model.MediaStreamHolder)
}

void MediaStreamHolder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MediaStreamHolder::MediaStreamHolder(const MediaStreamHolder& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.editorsdk.model.MediaStreamHolder)
}

void MediaStreamHolder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  codec_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotation_ = 0;
  pix_format_ = 0;
  color_space_ = 0;
  color_range_ = 0;
  bit_rate_ = GOOGLE_LONGLONG(0);
}

MediaStreamHolder::~MediaStreamHolder() {
  // @@protoc_insertion_point(destructor:whensunset.editorsdk.model.MediaStreamHolder)
  SharedDtor();
}

void MediaStreamHolder::SharedDtor() {
  codec_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MediaStreamHolder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MediaStreamHolder& MediaStreamHolder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_editor_5fmodel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fmodel_2eproto();
#endif
  return *default_instance_;
}

MediaStreamHolder* MediaStreamHolder::default_instance_ = NULL;

MediaStreamHolder* MediaStreamHolder::New(::google::protobuf::Arena* arena) const {
  MediaStreamHolder* n = new MediaStreamHolder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaStreamHolder::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.editorsdk.model.MediaStreamHolder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MediaStreamHolder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MediaStreamHolder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  ZR_(rotation_, bit_rate_);
  codec_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MediaStreamHolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.editorsdk.model.MediaStreamHolder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_codec_type;
        break;
      }

      // optional string codec_type = 3;
      case 3: {
        if (tag == 26) {
         parse_codec_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codec_type().data(), this->codec_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.editorsdk.model.MediaStreamHolder.codec_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rotation;
        break;
      }

      // optional int32 rotation = 4;
      case 4: {
        if (tag == 32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pix_format;
        break;
      }

      // optional int32 pix_format = 5;
      case 5: {
        if (tag == 40) {
         parse_pix_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pix_format_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_color_space;
        break;
      }

      // optional int32 color_space = 6;
      case 6: {
        if (tag == 48) {
         parse_color_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_space_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_color_range;
        break;
      }

      // optional int32 color_range = 7;
      case 7: {
        if (tag == 56) {
         parse_color_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_range_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bit_rate;
        break;
      }

      // optional int64 bit_rate = 8;
      case 8: {
        if (tag == 64) {
         parse_bit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bit_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.editorsdk.model.MediaStreamHolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.editorsdk.model.MediaStreamHolder)
  return false;
#undef DO_
}

void MediaStreamHolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.editorsdk.model.MediaStreamHolder)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional string codec_type = 3;
  if (this->codec_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codec_type().data(), this->codec_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.editorsdk.model.MediaStreamHolder.codec_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->codec_type(), output);
  }

  // optional int32 rotation = 4;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rotation(), output);
  }

  // optional int32 pix_format = 5;
  if (this->pix_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pix_format(), output);
  }

  // optional int32 color_space = 6;
  if (this->color_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->color_space(), output);
  }

  // optional int32 color_range = 7;
  if (this->color_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->color_range(), output);
  }

  // optional int64 bit_rate = 8;
  if (this->bit_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->bit_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.editorsdk.model.MediaStreamHolder)
}

int MediaStreamHolder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.editorsdk.model.MediaStreamHolder)
  int total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional string codec_type = 3;
  if (this->codec_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codec_type());
  }

  // optional int32 rotation = 4;
  if (this->rotation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rotation());
  }

  // optional int32 pix_format = 5;
  if (this->pix_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pix_format());
  }

  // optional int32 color_space = 6;
  if (this->color_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_space());
  }

  // optional int32 color_range = 7;
  if (this->color_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_range());
  }

  // optional int64 bit_rate = 8;
  if (this->bit_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bit_rate());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaStreamHolder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MediaStreamHolder*>(&from));
}

void MediaStreamHolder::MergeFrom(const MediaStreamHolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.editorsdk.model.MediaStreamHolder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.codec_type().size() > 0) {

    codec_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_type_);
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
  if (from.pix_format() != 0) {
    set_pix_format(from.pix_format());
  }
  if (from.color_space() != 0) {
    set_color_space(from.color_space());
  }
  if (from.color_range() != 0) {
    set_color_range(from.color_range());
  }
  if (from.bit_rate() != 0) {
    set_bit_rate(from.bit_rate());
  }
}

void MediaStreamHolder::CopyFrom(const MediaStreamHolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.editorsdk.model.MediaStreamHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStreamHolder::IsInitialized() const {

  return true;
}

void MediaStreamHolder::Swap(MediaStreamHolder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaStreamHolder::InternalSwap(MediaStreamHolder* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  codec_type_.Swap(&other->codec_type_);
  std::swap(rotation_, other->rotation_);
  std::swap(pix_format_, other->pix_format_);
  std::swap(color_space_, other->color_space_);
  std::swap(color_range_, other->color_range_);
  std::swap(bit_rate_, other->bit_rate_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MediaStreamHolder::GetTypeName() const {
  return "whensunset.editorsdk.model.MediaStreamHolder";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaStreamHolder

// optional int32 width = 1;
void MediaStreamHolder::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::width() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.width)
  return width_;
}
 void MediaStreamHolder::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.width)
}

// optional int32 height = 2;
void MediaStreamHolder::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::height() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.height)
  return height_;
}
 void MediaStreamHolder::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.height)
}

// optional string codec_type = 3;
void MediaStreamHolder::clear_codec_type() {
  codec_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MediaStreamHolder::codec_type() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
  return codec_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaStreamHolder::set_codec_type(const ::std::string& value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}
 void MediaStreamHolder::set_codec_type(const char* value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}
 void MediaStreamHolder::set_codec_type(const char* value, size_t size) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}
 ::std::string* MediaStreamHolder::mutable_codec_type() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
  return codec_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MediaStreamHolder::release_codec_type() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
  
  return codec_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MediaStreamHolder::set_allocated_codec_type(::std::string* codec_type) {
  if (codec_type != NULL) {
    
  } else {
    
  }
  codec_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec_type);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}

// optional int32 rotation = 4;
void MediaStreamHolder::clear_rotation() {
  rotation_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::rotation() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.rotation)
  return rotation_;
}
 void MediaStreamHolder::set_rotation(::google::protobuf::int32 value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.rotation)
}

// optional int32 pix_format = 5;
void MediaStreamHolder::clear_pix_format() {
  pix_format_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::pix_format() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.pix_format)
  return pix_format_;
}
 void MediaStreamHolder::set_pix_format(::google::protobuf::int32 value) {
  
  pix_format_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.pix_format)
}

// optional int32 color_space = 6;
void MediaStreamHolder::clear_color_space() {
  color_space_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::color_space() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.color_space)
  return color_space_;
}
 void MediaStreamHolder::set_color_space(::google::protobuf::int32 value) {
  
  color_space_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.color_space)
}

// optional int32 color_range = 7;
void MediaStreamHolder::clear_color_range() {
  color_range_ = 0;
}
 ::google::protobuf::int32 MediaStreamHolder::color_range() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.color_range)
  return color_range_;
}
 void MediaStreamHolder::set_color_range(::google::protobuf::int32 value) {
  
  color_range_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.color_range)
}

// optional int64 bit_rate = 8;
void MediaStreamHolder::clear_bit_rate() {
  bit_rate_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MediaStreamHolder::bit_rate() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.bit_rate)
  return bit_rate_;
}
 void MediaStreamHolder::set_bit_rate(::google::protobuf::int64 value) {
  
  bit_rate_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.bit_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileHolder::kPathFieldNumber;
const int FileHolder::kFormatNameFieldNumber;
const int FileHolder::kProbeScoreFieldNumber;
const int FileHolder::kNumStreamsFieldNumber;
const int FileHolder::kStreamsFieldNumber;
const int FileHolder::kVideoStremaIndexFieldNumber;
const int FileHolder::kAudioStremaIndexFieldNumber;
const int FileHolder::kVideoCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileHolder::FileHolder()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.editorsdk.model.FileHolder)
}

void FileHolder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileHolder::FileHolder(const FileHolder& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.editorsdk.model.FileHolder)
}

void FileHolder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  probe_score_ = 0;
  num_streams_ = 0;
  video_strema_index_ = 0;
  audio_strema_index_ = 0;
  video_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileHolder::~FileHolder() {
  // @@protoc_insertion_point(destructor:whensunset.editorsdk.model.FileHolder)
  SharedDtor();
}

void FileHolder::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FileHolder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileHolder& FileHolder::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_editor_5fmodel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fmodel_2eproto();
#endif
  return *default_instance_;
}

FileHolder* FileHolder::default_instance_ = NULL;

FileHolder* FileHolder::New(::google::protobuf::Arena* arena) const {
  FileHolder* n = new FileHolder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileHolder::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.editorsdk.model.FileHolder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FileHolder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FileHolder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(probe_score_, num_streams_);
  ZR_(video_strema_index_, audio_strema_index_);
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  streams_.Clear();
}

bool FileHolder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.editorsdk.model.FileHolder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.editorsdk.model.FileHolder.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_format_name;
        break;
      }

      // optional string format_name = 2;
      case 2: {
        if (tag == 18) {
         parse_format_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format_name().data(), this->format_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.editorsdk.model.FileHolder.format_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_probe_score;
        break;
      }

      // optional int32 probe_score = 3;
      case 3: {
        if (tag == 24) {
         parse_probe_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probe_score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_streams;
        break;
      }

      // optional int32 num_streams = 4;
      case 4: {
        if (tag == 32) {
         parse_num_streams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_streams_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_streams;
        break;
      }

      // repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;
      case 5: {
        if (tag == 42) {
         parse_streams:
          DO_(input->IncrementRecursionDepth());
         parse_loop_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_streams;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_video_strema_index;
        break;
      }

      // optional int32 video_strema_index = 6;
      case 6: {
        if (tag == 48) {
         parse_video_strema_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_strema_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_audio_strema_index;
        break;
      }

      // optional int32 audio_strema_index = 7;
      case 7: {
        if (tag == 56) {
         parse_audio_strema_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_strema_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_video_comment;
        break;
      }

      // optional string video_comment = 9;
      case 9: {
        if (tag == 74) {
         parse_video_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->video_comment().data(), this->video_comment().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.editorsdk.model.FileHolder.video_comment"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.editorsdk.model.FileHolder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.editorsdk.model.FileHolder)
  return false;
#undef DO_
}

void FileHolder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.editorsdk.model.FileHolder)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.editorsdk.model.FileHolder.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string format_name = 2;
  if (this->format_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format_name().data(), this->format_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.editorsdk.model.FileHolder.format_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format_name(), output);
  }

  // optional int32 probe_score = 3;
  if (this->probe_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->probe_score(), output);
  }

  // optional int32 num_streams = 4;
  if (this->num_streams() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_streams(), output);
  }

  // repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;
  for (unsigned int i = 0, n = this->streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->streams(i), output);
  }

  // optional int32 video_strema_index = 6;
  if (this->video_strema_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->video_strema_index(), output);
  }

  // optional int32 audio_strema_index = 7;
  if (this->audio_strema_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->audio_strema_index(), output);
  }

  // optional string video_comment = 9;
  if (this->video_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->video_comment().data(), this->video_comment().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.editorsdk.model.FileHolder.video_comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->video_comment(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.editorsdk.model.FileHolder)
}

int FileHolder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.editorsdk.model.FileHolder)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string format_name = 2;
  if (this->format_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format_name());
  }

  // optional int32 probe_score = 3;
  if (this->probe_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->probe_score());
  }

  // optional int32 num_streams = 4;
  if (this->num_streams() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_streams());
  }

  // optional int32 video_strema_index = 6;
  if (this->video_strema_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->video_strema_index());
  }

  // optional int32 audio_strema_index = 7;
  if (this->audio_strema_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->audio_strema_index());
  }

  // optional string video_comment = 9;
  if (this->video_comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->video_comment());
  }

  // repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;
  total_size += 1 * this->streams_size();
  for (int i = 0; i < this->streams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streams(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileHolder::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileHolder*>(&from));
}

void FileHolder::MergeFrom(const FileHolder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.editorsdk.model.FileHolder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  streams_.MergeFrom(from.streams_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.format_name().size() > 0) {

    format_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_name_);
  }
  if (from.probe_score() != 0) {
    set_probe_score(from.probe_score());
  }
  if (from.num_streams() != 0) {
    set_num_streams(from.num_streams());
  }
  if (from.video_strema_index() != 0) {
    set_video_strema_index(from.video_strema_index());
  }
  if (from.audio_strema_index() != 0) {
    set_audio_strema_index(from.audio_strema_index());
  }
  if (from.video_comment().size() > 0) {

    video_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_comment_);
  }
}

void FileHolder::CopyFrom(const FileHolder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.editorsdk.model.FileHolder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHolder::IsInitialized() const {

  return true;
}

void FileHolder::Swap(FileHolder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileHolder::InternalSwap(FileHolder* other) {
  path_.Swap(&other->path_);
  format_name_.Swap(&other->format_name_);
  std::swap(probe_score_, other->probe_score_);
  std::swap(num_streams_, other->num_streams_);
  streams_.UnsafeArenaSwap(&other->streams_);
  std::swap(video_strema_index_, other->video_strema_index_);
  std::swap(audio_strema_index_, other->audio_strema_index_);
  video_comment_.Swap(&other->video_comment_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileHolder::GetTypeName() const {
  return "whensunset.editorsdk.model.FileHolder";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileHolder

// optional string path = 1;
void FileHolder::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileHolder::path() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileHolder::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHolder.path)
}
 void FileHolder::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.FileHolder.path)
}
 void FileHolder::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.FileHolder.path)
}
 ::std::string* FileHolder::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHolder.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileHolder::release_path() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.FileHolder.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileHolder::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.FileHolder.path)
}

// optional string format_name = 2;
void FileHolder::clear_format_name() {
  format_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileHolder::format_name() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.format_name)
  return format_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileHolder::set_format_name(const ::std::string& value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHolder.format_name)
}
 void FileHolder::set_format_name(const char* value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.FileHolder.format_name)
}
 void FileHolder::set_format_name(const char* value, size_t size) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.FileHolder.format_name)
}
 ::std::string* FileHolder::mutable_format_name() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHolder.format_name)
  return format_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileHolder::release_format_name() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.FileHolder.format_name)
  
  return format_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileHolder::set_allocated_format_name(::std::string* format_name) {
  if (format_name != NULL) {
    
  } else {
    
  }
  format_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format_name);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.FileHolder.format_name)
}

// optional int32 probe_score = 3;
void FileHolder::clear_probe_score() {
  probe_score_ = 0;
}
 ::google::protobuf::int32 FileHolder::probe_score() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.probe_score)
  return probe_score_;
}
 void FileHolder::set_probe_score(::google::protobuf::int32 value) {
  
  probe_score_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHolder.probe_score)
}

// optional int32 num_streams = 4;
void FileHolder::clear_num_streams() {
  num_streams_ = 0;
}
 ::google::protobuf::int32 FileHolder::num_streams() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.num_streams)
  return num_streams_;
}
 void FileHolder::set_num_streams(::google::protobuf::int32 value) {
  
  num_streams_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHolder.num_streams)
}

// repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;
int FileHolder::streams_size() const {
  return streams_.size();
}
void FileHolder::clear_streams() {
  streams_.Clear();
}
const ::whensunset::editorsdk::model::MediaStreamHolder& FileHolder::streams(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.streams)
  return streams_.Get(index);
}
::whensunset::editorsdk::model::MediaStreamHolder* FileHolder::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHolder.streams)
  return streams_.Mutable(index);
}
::whensunset::editorsdk::model::MediaStreamHolder* FileHolder::add_streams() {
  // @@protoc_insertion_point(field_add:whensunset.editorsdk.model.FileHolder.streams)
  return streams_.Add();
}
::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::MediaStreamHolder >*
FileHolder::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.editorsdk.model.FileHolder.streams)
  return &streams_;
}
const ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::MediaStreamHolder >&
FileHolder::streams() const {
  // @@protoc_insertion_point(field_list:whensunset.editorsdk.model.FileHolder.streams)
  return streams_;
}

// optional int32 video_strema_index = 6;
void FileHolder::clear_video_strema_index() {
  video_strema_index_ = 0;
}
 ::google::protobuf::int32 FileHolder::video_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.video_strema_index)
  return video_strema_index_;
}
 void FileHolder::set_video_strema_index(::google::protobuf::int32 value) {
  
  video_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHolder.video_strema_index)
}

// optional int32 audio_strema_index = 7;
void FileHolder::clear_audio_strema_index() {
  audio_strema_index_ = 0;
}
 ::google::protobuf::int32 FileHolder::audio_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.audio_strema_index)
  return audio_strema_index_;
}
 void FileHolder::set_audio_strema_index(::google::protobuf::int32 value) {
  
  audio_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHolder.audio_strema_index)
}

// optional string video_comment = 9;
void FileHolder::clear_video_comment() {
  video_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileHolder::video_comment() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHolder.video_comment)
  return video_comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileHolder::set_video_comment(const ::std::string& value) {
  
  video_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHolder.video_comment)
}
 void FileHolder::set_video_comment(const char* value) {
  
  video_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.FileHolder.video_comment)
}
 void FileHolder::set_video_comment(const char* value, size_t size) {
  
  video_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.FileHolder.video_comment)
}
 ::std::string* FileHolder::mutable_video_comment() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHolder.video_comment)
  return video_comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileHolder::release_video_comment() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.FileHolder.video_comment)
  
  return video_comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileHolder::set_allocated_video_comment(::std::string* video_comment) {
  if (video_comment != NULL) {
    
  } else {
    
  }
  video_comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_comment);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.FileHolder.video_comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRedFieldNumber;
const int Color::kGreenFieldNumber;
const int Color::kBlueFieldNumber;
const int Color::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.editorsdk.model.Color)
}

void Color::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Color::Color(const Color& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.editorsdk.model.Color)
}

void Color::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  alpha_ = 0;
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:whensunset.editorsdk.model.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Color& Color::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_editor_5fmodel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fmodel_2eproto();
#endif
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.editorsdk.model.Color)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Color, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(red_, alpha_);

#undef ZR_HELPER_
#undef ZR_

}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.editorsdk.model.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float red = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_green;
        break;
      }

      // optional float green = 2;
      case 2: {
        if (tag == 21) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &green_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_blue;
        break;
      }

      // optional float blue = 3;
      case 3: {
        if (tag == 29) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_alpha;
        break;
      }

      // optional float alpha = 4;
      case 4: {
        if (tag == 37) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.editorsdk.model.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.editorsdk.model.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.editorsdk.model.Color)
  // optional float red = 1;
  if (this->red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->red(), output);
  }

  // optional float green = 2;
  if (this->green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->green(), output);
  }

  // optional float blue = 3;
  if (this->blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blue(), output);
  }

  // optional float alpha = 4;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alpha(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.editorsdk.model.Color)
}

int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.editorsdk.model.Color)
  int total_size = 0;

  // optional float red = 1;
  if (this->red() != 0) {
    total_size += 1 + 4;
  }

  // optional float green = 2;
  if (this->green() != 0) {
    total_size += 1 + 4;
  }

  // optional float blue = 3;
  if (this->blue() != 0) {
    total_size += 1 + 4;
  }

  // optional float alpha = 4;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Color*>(&from));
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.editorsdk.model.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.red() != 0) {
    set_red(from.red());
  }
  if (from.green() != 0) {
    set_green(from.green());
  }
  if (from.blue() != 0) {
    set_blue(from.blue());
  }
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.editorsdk.model.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(red_, other->red_);
  std::swap(green_, other->green_);
  std::swap(blue_, other->blue_);
  std::swap(alpha_, other->alpha_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Color::GetTypeName() const {
  return "whensunset.editorsdk.model.Color";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional float red = 1;
void Color::clear_red() {
  red_ = 0;
}
 float Color::red() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.red)
  return red_;
}
 void Color::set_red(float value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.red)
}

// optional float green = 2;
void Color::clear_green() {
  green_ = 0;
}
 float Color::green() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.green)
  return green_;
}
 void Color::set_green(float value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.green)
}

// optional float blue = 3;
void Color::clear_blue() {
  blue_ = 0;
}
 float Color::blue() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.blue)
  return blue_;
}
 void Color::set_blue(float value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.blue)
}

// optional float alpha = 4;
void Color::clear_alpha() {
  alpha_ = 0;
}
 float Color::alpha() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.alpha)
  return alpha_;
}
 void Color::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoAsset::kAssetIdFieldNumber;
const int VideoAsset::kAssetPathFieldNumber;
const int VideoAsset::kAssetVideoFileHodlerFieldNumber;
const int VideoAsset::kClippedTimeRangeFieldNumber;
const int VideoAsset::kSpeedFieldNumber;
const int VideoAsset::kVolumeFieldNumber;
const int VideoAsset::kAssetAudioPathFieldNumber;
const int VideoAsset::kAssetAudioFileHodlerFieldNumber;
const int VideoAsset::kIsReversedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoAsset::VideoAsset()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.editorsdk.model.VideoAsset)
}

void VideoAsset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asset_video_file_hodler_ = const_cast< ::whensunset::editorsdk::model::FileHolder*>(
      ::whensunset::editorsdk::model::FileHolder::internal_default_instance());
#else
  asset_video_file_hodler_ = const_cast< ::whensunset::editorsdk::model::FileHolder*>(&::whensunset::editorsdk::model::FileHolder::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clipped_time_range_ = const_cast< ::whensunset::editorsdk::model::TimeRange*>(
      ::whensunset::editorsdk::model::TimeRange::internal_default_instance());
#else
  clipped_time_range_ = const_cast< ::whensunset::editorsdk::model::TimeRange*>(&::whensunset::editorsdk::model::TimeRange::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asset_audio_file_hodler_ = const_cast< ::whensunset::editorsdk::model::FileHolder*>(
      ::whensunset::editorsdk::model::FileHolder::internal_default_instance());
#else
  asset_audio_file_hodler_ = const_cast< ::whensunset::editorsdk::model::FileHolder*>(&::whensunset::editorsdk::model::FileHolder::default_instance());
#endif
}

VideoAsset::VideoAsset(const VideoAsset& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.editorsdk.model.VideoAsset)
}

void VideoAsset::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  asset_id_ = GOOGLE_ULONGLONG(0);
  asset_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_video_file_hodler_ = NULL;
  clipped_time_range_ = NULL;
  speed_ = 0;
  volume_ = 0;
  asset_audio_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_audio_file_hodler_ = NULL;
  is_reversed_ = false;
}

VideoAsset::~VideoAsset() {
  // @@protoc_insertion_point(destructor:whensunset.editorsdk.model.VideoAsset)
  SharedDtor();
}

void VideoAsset::SharedDtor() {
  asset_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_audio_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete asset_video_file_hodler_;
    delete clipped_time_range_;
    delete asset_audio_file_hodler_;
  }
}

void VideoAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoAsset& VideoAsset::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_editor_5fmodel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fmodel_2eproto();
#endif
  return *default_instance_;
}

VideoAsset* VideoAsset::default_instance_ = NULL;

VideoAsset* VideoAsset::New(::google::protobuf::Arena* arena) const {
  VideoAsset* n = new VideoAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.editorsdk.model.VideoAsset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoAsset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoAsset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(speed_, volume_);
  asset_id_ = GOOGLE_ULONGLONG(0);
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && asset_video_file_hodler_ != NULL) delete asset_video_file_hodler_;
  asset_video_file_hodler_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipped_time_range_ != NULL) delete clipped_time_range_;
  clipped_time_range_ = NULL;
  asset_audio_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && asset_audio_file_hodler_ != NULL) delete asset_audio_file_hodler_;
  asset_audio_file_hodler_ = NULL;
  is_reversed_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool VideoAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.editorsdk.model.VideoAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 asset_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asset_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_asset_path;
        break;
      }

      // optional string asset_path = 2;
      case 2: {
        if (tag == 18) {
         parse_asset_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_path().data(), this->asset_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.editorsdk.model.VideoAsset.asset_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_asset_video_file_hodler;
        break;
      }

      // optional .whensunset.editorsdk.model.FileHolder asset_video_file_hodler = 3;
      case 3: {
        if (tag == 26) {
         parse_asset_video_file_hodler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset_video_file_hodler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clipped_time_range;
        break;
      }

      // optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
      case 4: {
        if (tag == 34) {
         parse_clipped_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipped_time_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_speed;
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (tag == 41) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_volume;
        break;
      }

      // optional double volume = 6;
      case 6: {
        if (tag == 49) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_asset_audio_path;
        break;
      }

      // optional string asset_audio_path = 7;
      case 7: {
        if (tag == 58) {
         parse_asset_audio_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_audio_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_audio_path().data(), this->asset_audio_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.editorsdk.model.VideoAsset.asset_audio_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_asset_audio_file_hodler;
        break;
      }

      // optional .whensunset.editorsdk.model.FileHolder asset_audio_file_hodler = 8;
      case 8: {
        if (tag == 66) {
         parse_asset_audio_file_hodler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset_audio_file_hodler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_reversed;
        break;
      }

      // optional bool is_reversed = 9;
      case 9: {
        if (tag == 72) {
         parse_is_reversed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reversed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.editorsdk.model.VideoAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.editorsdk.model.VideoAsset)
  return false;
#undef DO_
}

void VideoAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.editorsdk.model.VideoAsset)
  // optional uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->asset_id(), output);
  }

  // optional string asset_path = 2;
  if (this->asset_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_path().data(), this->asset_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.editorsdk.model.VideoAsset.asset_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->asset_path(), output);
  }

  // optional .whensunset.editorsdk.model.FileHolder asset_video_file_hodler = 3;
  if (this->has_asset_video_file_hodler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->asset_video_file_hodler_, output);
  }

  // optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
  if (this->has_clipped_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->clipped_time_range_, output);
  }

  // optional double speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  // optional double volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->volume(), output);
  }

  // optional string asset_audio_path = 7;
  if (this->asset_audio_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_audio_path().data(), this->asset_audio_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.editorsdk.model.VideoAsset.asset_audio_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->asset_audio_path(), output);
  }

  // optional .whensunset.editorsdk.model.FileHolder asset_audio_file_hodler = 8;
  if (this->has_asset_audio_file_hodler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->asset_audio_file_hodler_, output);
  }

  // optional bool is_reversed = 9;
  if (this->is_reversed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_reversed(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.editorsdk.model.VideoAsset)
}

int VideoAsset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.editorsdk.model.VideoAsset)
  int total_size = 0;

  // optional uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->asset_id());
  }

  // optional string asset_path = 2;
  if (this->asset_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_path());
  }

  // optional .whensunset.editorsdk.model.FileHolder asset_video_file_hodler = 3;
  if (this->has_asset_video_file_hodler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_video_file_hodler_);
  }

  // optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
  if (this->has_clipped_time_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipped_time_range_);
  }

  // optional double speed = 5;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double volume = 6;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // optional string asset_audio_path = 7;
  if (this->asset_audio_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_audio_path());
  }

  // optional .whensunset.editorsdk.model.FileHolder asset_audio_file_hodler = 8;
  if (this->has_asset_audio_file_hodler()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_audio_file_hodler_);
  }

  // optional bool is_reversed = 9;
  if (this->is_reversed() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoAsset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoAsset*>(&from));
}

void VideoAsset::MergeFrom(const VideoAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.editorsdk.model.VideoAsset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.asset_id() != 0) {
    set_asset_id(from.asset_id());
  }
  if (from.asset_path().size() > 0) {

    asset_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_path_);
  }
  if (from.has_asset_video_file_hodler()) {
    mutable_asset_video_file_hodler()->::whensunset::editorsdk::model::FileHolder::MergeFrom(from.asset_video_file_hodler());
  }
  if (from.has_clipped_time_range()) {
    mutable_clipped_time_range()->::whensunset::editorsdk::model::TimeRange::MergeFrom(from.clipped_time_range());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.asset_audio_path().size() > 0) {

    asset_audio_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_audio_path_);
  }
  if (from.has_asset_audio_file_hodler()) {
    mutable_asset_audio_file_hodler()->::whensunset::editorsdk::model::FileHolder::MergeFrom(from.asset_audio_file_hodler());
  }
  if (from.is_reversed() != 0) {
    set_is_reversed(from.is_reversed());
  }
}

void VideoAsset::CopyFrom(const VideoAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.editorsdk.model.VideoAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAsset::IsInitialized() const {

  return true;
}

void VideoAsset::Swap(VideoAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoAsset::InternalSwap(VideoAsset* other) {
  std::swap(asset_id_, other->asset_id_);
  asset_path_.Swap(&other->asset_path_);
  std::swap(asset_video_file_hodler_, other->asset_video_file_hodler_);
  std::swap(clipped_time_range_, other->clipped_time_range_);
  std::swap(speed_, other->speed_);
  std::swap(volume_, other->volume_);
  asset_audio_path_.Swap(&other->asset_audio_path_);
  std::swap(asset_audio_file_hodler_, other->asset_audio_file_hodler_);
  std::swap(is_reversed_, other->is_reversed_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoAsset::GetTypeName() const {
  return "whensunset.editorsdk.model.VideoAsset";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoAsset

// optional uint64 asset_id = 1;
void VideoAsset::clear_asset_id() {
  asset_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 VideoAsset::asset_id() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_id)
  return asset_id_;
}
 void VideoAsset::set_asset_id(::google::protobuf::uint64 value) {
  
  asset_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.asset_id)
}

// optional string asset_path = 2;
void VideoAsset::clear_asset_path() {
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoAsset::asset_path() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_path)
  return asset_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoAsset::set_asset_path(const ::std::string& value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.asset_path)
}
 void VideoAsset::set_asset_path(const char* value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.VideoAsset.asset_path)
}
 void VideoAsset::set_asset_path(const char* value, size_t size) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.VideoAsset.asset_path)
}
 ::std::string* VideoAsset::mutable_asset_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_path)
  return asset_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoAsset::release_asset_path() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_path)
  
  return asset_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoAsset::set_allocated_asset_path(::std::string* asset_path) {
  if (asset_path != NULL) {
    
  } else {
    
  }
  asset_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_path)
}

// optional .whensunset.editorsdk.model.FileHolder asset_video_file_hodler = 3;
bool VideoAsset::has_asset_video_file_hodler() const {
  return !_is_default_instance_ && asset_video_file_hodler_ != NULL;
}
void VideoAsset::clear_asset_video_file_hodler() {
  if (GetArenaNoVirtual() == NULL && asset_video_file_hodler_ != NULL) delete asset_video_file_hodler_;
  asset_video_file_hodler_ = NULL;
}
const ::whensunset::editorsdk::model::FileHolder& VideoAsset::asset_video_file_hodler() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asset_video_file_hodler_ != NULL ? *asset_video_file_hodler_ : *default_instance().asset_video_file_hodler_;
#else
  return asset_video_file_hodler_ != NULL ? *asset_video_file_hodler_ : *default_instance_->asset_video_file_hodler_;
#endif
}
::whensunset::editorsdk::model::FileHolder* VideoAsset::mutable_asset_video_file_hodler() {
  
  if (asset_video_file_hodler_ == NULL) {
    asset_video_file_hodler_ = new ::whensunset::editorsdk::model::FileHolder;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
  return asset_video_file_hodler_;
}
::whensunset::editorsdk::model::FileHolder* VideoAsset::release_asset_video_file_hodler() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
  
  ::whensunset::editorsdk::model::FileHolder* temp = asset_video_file_hodler_;
  asset_video_file_hodler_ = NULL;
  return temp;
}
void VideoAsset::set_allocated_asset_video_file_hodler(::whensunset::editorsdk::model::FileHolder* asset_video_file_hodler) {
  delete asset_video_file_hodler_;
  asset_video_file_hodler_ = asset_video_file_hodler;
  if (asset_video_file_hodler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
}

// optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
bool VideoAsset::has_clipped_time_range() const {
  return !_is_default_instance_ && clipped_time_range_ != NULL;
}
void VideoAsset::clear_clipped_time_range() {
  if (GetArenaNoVirtual() == NULL && clipped_time_range_ != NULL) delete clipped_time_range_;
  clipped_time_range_ = NULL;
}
const ::whensunset::editorsdk::model::TimeRange& VideoAsset::clipped_time_range() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return clipped_time_range_ != NULL ? *clipped_time_range_ : *default_instance().clipped_time_range_;
#else
  return clipped_time_range_ != NULL ? *clipped_time_range_ : *default_instance_->clipped_time_range_;
#endif
}
::whensunset::editorsdk::model::TimeRange* VideoAsset::mutable_clipped_time_range() {
  
  if (clipped_time_range_ == NULL) {
    clipped_time_range_ = new ::whensunset::editorsdk::model::TimeRange;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
  return clipped_time_range_;
}
::whensunset::editorsdk::model::TimeRange* VideoAsset::release_clipped_time_range() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
  
  ::whensunset::editorsdk::model::TimeRange* temp = clipped_time_range_;
  clipped_time_range_ = NULL;
  return temp;
}
void VideoAsset::set_allocated_clipped_time_range(::whensunset::editorsdk::model::TimeRange* clipped_time_range) {
  delete clipped_time_range_;
  clipped_time_range_ = clipped_time_range;
  if (clipped_time_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
}

// optional double speed = 5;
void VideoAsset::clear_speed() {
  speed_ = 0;
}
 double VideoAsset::speed() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.speed)
  return speed_;
}
 void VideoAsset::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.speed)
}

// optional double volume = 6;
void VideoAsset::clear_volume() {
  volume_ = 0;
}
 double VideoAsset::volume() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.volume)
  return volume_;
}
 void VideoAsset::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.volume)
}

// optional string asset_audio_path = 7;
void VideoAsset::clear_asset_audio_path() {
  asset_audio_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoAsset::asset_audio_path() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
  return asset_audio_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoAsset::set_asset_audio_path(const ::std::string& value) {
  
  asset_audio_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}
 void VideoAsset::set_asset_audio_path(const char* value) {
  
  asset_audio_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}
 void VideoAsset::set_asset_audio_path(const char* value, size_t size) {
  
  asset_audio_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}
 ::std::string* VideoAsset::mutable_asset_audio_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
  return asset_audio_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoAsset::release_asset_audio_path() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
  
  return asset_audio_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoAsset::set_allocated_asset_audio_path(::std::string* asset_audio_path) {
  if (asset_audio_path != NULL) {
    
  } else {
    
  }
  asset_audio_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_audio_path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}

// optional .whensunset.editorsdk.model.FileHolder asset_audio_file_hodler = 8;
bool VideoAsset::has_asset_audio_file_hodler() const {
  return !_is_default_instance_ && asset_audio_file_hodler_ != NULL;
}
void VideoAsset::clear_asset_audio_file_hodler() {
  if (GetArenaNoVirtual() == NULL && asset_audio_file_hodler_ != NULL) delete asset_audio_file_hodler_;
  asset_audio_file_hodler_ = NULL;
}
const ::whensunset::editorsdk::model::FileHolder& VideoAsset::asset_audio_file_hodler() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asset_audio_file_hodler_ != NULL ? *asset_audio_file_hodler_ : *default_instance().asset_audio_file_hodler_;
#else
  return asset_audio_file_hodler_ != NULL ? *asset_audio_file_hodler_ : *default_instance_->asset_audio_file_hodler_;
#endif
}
::whensunset::editorsdk::model::FileHolder* VideoAsset::mutable_asset_audio_file_hodler() {
  
  if (asset_audio_file_hodler_ == NULL) {
    asset_audio_file_hodler_ = new ::whensunset::editorsdk::model::FileHolder;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
  return asset_audio_file_hodler_;
}
::whensunset::editorsdk::model::FileHolder* VideoAsset::release_asset_audio_file_hodler() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
  
  ::whensunset::editorsdk::model::FileHolder* temp = asset_audio_file_hodler_;
  asset_audio_file_hodler_ = NULL;
  return temp;
}
void VideoAsset::set_allocated_asset_audio_file_hodler(::whensunset::editorsdk::model::FileHolder* asset_audio_file_hodler) {
  delete asset_audio_file_hodler_;
  asset_audio_file_hodler_ = asset_audio_file_hodler;
  if (asset_audio_file_hodler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
}

// optional bool is_reversed = 9;
void VideoAsset::clear_is_reversed() {
  is_reversed_ = false;
}
 bool VideoAsset::is_reversed() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.is_reversed)
  return is_reversed_;
}
 void VideoAsset::set_is_reversed(bool value) {
  
  is_reversed_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.is_reversed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioAsset::kAssetIdFieldNumber;
const int AudioAsset::kAssetPathFieldNumber;
const int AudioAsset::kAssetAudioFileHolderFieldNumber;
const int AudioAsset::kClippedTimeRangeFieldNumber;
const int AudioAsset::kSpeedFieldNumber;
const int AudioAsset::kVolumeFieldNumber;
const int AudioAsset::kIsRepeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioAsset::AudioAsset()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.editorsdk.model.AudioAsset)
}

void AudioAsset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  asset_audio_file_holder_ = const_cast< ::whensunset::editorsdk::model::FileHolder*>(
      ::whensunset::editorsdk::model::FileHolder::internal_default_instance());
#else
  asset_audio_file_holder_ = const_cast< ::whensunset::editorsdk::model::FileHolder*>(&::whensunset::editorsdk::model::FileHolder::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clipped_time_range_ = const_cast< ::whensunset::editorsdk::model::TimeRange*>(
      ::whensunset::editorsdk::model::TimeRange::internal_default_instance());
#else
  clipped_time_range_ = const_cast< ::whensunset::editorsdk::model::TimeRange*>(&::whensunset::editorsdk::model::TimeRange::default_instance());
#endif
}

AudioAsset::AudioAsset(const AudioAsset& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.editorsdk.model.AudioAsset)
}

void AudioAsset::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  asset_id_ = GOOGLE_ULONGLONG(0);
  asset_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_audio_file_holder_ = NULL;
  clipped_time_range_ = NULL;
  speed_ = 0;
  volume_ = 0;
  is_repeat_ = false;
}

AudioAsset::~AudioAsset() {
  // @@protoc_insertion_point(destructor:whensunset.editorsdk.model.AudioAsset)
  SharedDtor();
}

void AudioAsset::SharedDtor() {
  asset_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete asset_audio_file_holder_;
    delete clipped_time_range_;
  }
}

void AudioAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioAsset& AudioAsset::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_editor_5fmodel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fmodel_2eproto();
#endif
  return *default_instance_;
}

AudioAsset* AudioAsset::default_instance_ = NULL;

AudioAsset* AudioAsset::New(::google::protobuf::Arena* arena) const {
  AudioAsset* n = new AudioAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.editorsdk.model.AudioAsset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AudioAsset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AudioAsset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(speed_, is_repeat_);
  asset_id_ = GOOGLE_ULONGLONG(0);
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && asset_audio_file_holder_ != NULL) delete asset_audio_file_holder_;
  asset_audio_file_holder_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipped_time_range_ != NULL) delete clipped_time_range_;
  clipped_time_range_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool AudioAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.editorsdk.model.AudioAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 asset_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &asset_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_asset_path;
        break;
      }

      // optional string asset_path = 2;
      case 2: {
        if (tag == 18) {
         parse_asset_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->asset_path().data(), this->asset_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "whensunset.editorsdk.model.AudioAsset.asset_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_asset_audio_file_holder;
        break;
      }

      // optional .whensunset.editorsdk.model.FileHolder asset_audio_file_holder = 3;
      case 3: {
        if (tag == 26) {
         parse_asset_audio_file_holder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset_audio_file_holder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clipped_time_range;
        break;
      }

      // optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
      case 4: {
        if (tag == 34) {
         parse_clipped_time_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipped_time_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_speed;
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (tag == 41) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_volume;
        break;
      }

      // optional double volume = 6;
      case 6: {
        if (tag == 49) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_repeat;
        break;
      }

      // optional bool is_repeat = 7;
      case 7: {
        if (tag == 56) {
         parse_is_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_repeat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.editorsdk.model.AudioAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.editorsdk.model.AudioAsset)
  return false;
#undef DO_
}

void AudioAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.editorsdk.model.AudioAsset)
  // optional uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->asset_id(), output);
  }

  // optional string asset_path = 2;
  if (this->asset_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->asset_path().data(), this->asset_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "whensunset.editorsdk.model.AudioAsset.asset_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->asset_path(), output);
  }

  // optional .whensunset.editorsdk.model.FileHolder asset_audio_file_holder = 3;
  if (this->has_asset_audio_file_holder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->asset_audio_file_holder_, output);
  }

  // optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
  if (this->has_clipped_time_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->clipped_time_range_, output);
  }

  // optional double speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  // optional double volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->volume(), output);
  }

  // optional bool is_repeat = 7;
  if (this->is_repeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_repeat(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.editorsdk.model.AudioAsset)
}

int AudioAsset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.editorsdk.model.AudioAsset)
  int total_size = 0;

  // optional uint64 asset_id = 1;
  if (this->asset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->asset_id());
  }

  // optional string asset_path = 2;
  if (this->asset_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->asset_path());
  }

  // optional .whensunset.editorsdk.model.FileHolder asset_audio_file_holder = 3;
  if (this->has_asset_audio_file_holder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_audio_file_holder_);
  }

  // optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
  if (this->has_clipped_time_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipped_time_range_);
  }

  // optional double speed = 5;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double volume = 6;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // optional bool is_repeat = 7;
  if (this->is_repeat() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioAsset::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioAsset*>(&from));
}

void AudioAsset::MergeFrom(const AudioAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.editorsdk.model.AudioAsset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.asset_id() != 0) {
    set_asset_id(from.asset_id());
  }
  if (from.asset_path().size() > 0) {

    asset_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_path_);
  }
  if (from.has_asset_audio_file_holder()) {
    mutable_asset_audio_file_holder()->::whensunset::editorsdk::model::FileHolder::MergeFrom(from.asset_audio_file_holder());
  }
  if (from.has_clipped_time_range()) {
    mutable_clipped_time_range()->::whensunset::editorsdk::model::TimeRange::MergeFrom(from.clipped_time_range());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.is_repeat() != 0) {
    set_is_repeat(from.is_repeat());
  }
}

void AudioAsset::CopyFrom(const AudioAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.editorsdk.model.AudioAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioAsset::IsInitialized() const {

  return true;
}

void AudioAsset::Swap(AudioAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioAsset::InternalSwap(AudioAsset* other) {
  std::swap(asset_id_, other->asset_id_);
  asset_path_.Swap(&other->asset_path_);
  std::swap(asset_audio_file_holder_, other->asset_audio_file_holder_);
  std::swap(clipped_time_range_, other->clipped_time_range_);
  std::swap(speed_, other->speed_);
  std::swap(volume_, other->volume_);
  std::swap(is_repeat_, other->is_repeat_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioAsset::GetTypeName() const {
  return "whensunset.editorsdk.model.AudioAsset";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioAsset

// optional uint64 asset_id = 1;
void AudioAsset::clear_asset_id() {
  asset_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AudioAsset::asset_id() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.AudioAsset.asset_id)
  return asset_id_;
}
 void AudioAsset::set_asset_id(::google::protobuf::uint64 value) {
  
  asset_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.AudioAsset.asset_id)
}

// optional string asset_path = 2;
void AudioAsset::clear_asset_path() {
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AudioAsset::asset_path() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.AudioAsset.asset_path)
  return asset_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioAsset::set_asset_path(const ::std::string& value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.AudioAsset.asset_path)
}
 void AudioAsset::set_asset_path(const char* value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.AudioAsset.asset_path)
}
 void AudioAsset::set_asset_path(const char* value, size_t size) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.AudioAsset.asset_path)
}
 ::std::string* AudioAsset::mutable_asset_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.AudioAsset.asset_path)
  return asset_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AudioAsset::release_asset_path() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.AudioAsset.asset_path)
  
  return asset_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AudioAsset::set_allocated_asset_path(::std::string* asset_path) {
  if (asset_path != NULL) {
    
  } else {
    
  }
  asset_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.AudioAsset.asset_path)
}

// optional .whensunset.editorsdk.model.FileHolder asset_audio_file_holder = 3;
bool AudioAsset::has_asset_audio_file_holder() const {
  return !_is_default_instance_ && asset_audio_file_holder_ != NULL;
}
void AudioAsset::clear_asset_audio_file_holder() {
  if (GetArenaNoVirtual() == NULL && asset_audio_file_holder_ != NULL) delete asset_audio_file_holder_;
  asset_audio_file_holder_ = NULL;
}
const ::whensunset::editorsdk::model::FileHolder& AudioAsset::asset_audio_file_holder() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.AudioAsset.asset_audio_file_holder)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asset_audio_file_holder_ != NULL ? *asset_audio_file_holder_ : *default_instance().asset_audio_file_holder_;
#else
  return asset_audio_file_holder_ != NULL ? *asset_audio_file_holder_ : *default_instance_->asset_audio_file_holder_;
#endif
}
::whensunset::editorsdk::model::FileHolder* AudioAsset::mutable_asset_audio_file_holder() {
  
  if (asset_audio_file_holder_ == NULL) {
    asset_audio_file_holder_ = new ::whensunset::editorsdk::model::FileHolder;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.AudioAsset.asset_audio_file_holder)
  return asset_audio_file_holder_;
}
::whensunset::editorsdk::model::FileHolder* AudioAsset::release_asset_audio_file_holder() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.AudioAsset.asset_audio_file_holder)
  
  ::whensunset::editorsdk::model::FileHolder* temp = asset_audio_file_holder_;
  asset_audio_file_holder_ = NULL;
  return temp;
}
void AudioAsset::set_allocated_asset_audio_file_holder(::whensunset::editorsdk::model::FileHolder* asset_audio_file_holder) {
  delete asset_audio_file_holder_;
  asset_audio_file_holder_ = asset_audio_file_holder;
  if (asset_audio_file_holder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.AudioAsset.asset_audio_file_holder)
}

// optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
bool AudioAsset::has_clipped_time_range() const {
  return !_is_default_instance_ && clipped_time_range_ != NULL;
}
void AudioAsset::clear_clipped_time_range() {
  if (GetArenaNoVirtual() == NULL && clipped_time_range_ != NULL) delete clipped_time_range_;
  clipped_time_range_ = NULL;
}
const ::whensunset::editorsdk::model::TimeRange& AudioAsset::clipped_time_range() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.AudioAsset.clipped_time_range)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return clipped_time_range_ != NULL ? *clipped_time_range_ : *default_instance().clipped_time_range_;
#else
  return clipped_time_range_ != NULL ? *clipped_time_range_ : *default_instance_->clipped_time_range_;
#endif
}
::whensunset::editorsdk::model::TimeRange* AudioAsset::mutable_clipped_time_range() {
  
  if (clipped_time_range_ == NULL) {
    clipped_time_range_ = new ::whensunset::editorsdk::model::TimeRange;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.AudioAsset.clipped_time_range)
  return clipped_time_range_;
}
::whensunset::editorsdk::model::TimeRange* AudioAsset::release_clipped_time_range() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.AudioAsset.clipped_time_range)
  
  ::whensunset::editorsdk::model::TimeRange* temp = clipped_time_range_;
  clipped_time_range_ = NULL;
  return temp;
}
void AudioAsset::set_allocated_clipped_time_range(::whensunset::editorsdk::model::TimeRange* clipped_time_range) {
  delete clipped_time_range_;
  clipped_time_range_ = clipped_time_range;
  if (clipped_time_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.AudioAsset.clipped_time_range)
}

// optional double speed = 5;
void AudioAsset::clear_speed() {
  speed_ = 0;
}
 double AudioAsset::speed() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.AudioAsset.speed)
  return speed_;
}
 void AudioAsset::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.AudioAsset.speed)
}

// optional double volume = 6;
void AudioAsset::clear_volume() {
  volume_ = 0;
}
 double AudioAsset::volume() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.AudioAsset.volume)
  return volume_;
}
 void AudioAsset::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.AudioAsset.volume)
}

// optional bool is_repeat = 7;
void AudioAsset::clear_is_repeat() {
  is_repeat_ = false;
}
 bool AudioAsset::is_repeat() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.AudioAsset.is_repeat)
  return is_repeat_;
}
 void AudioAsset::set_is_repeat(bool value) {
  
  is_repeat_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.AudioAsset.is_repeat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoWorkspace::kWorkSpaceIdFieldNumber;
const int VideoWorkspace::kVideoAssetFieldNumber;
const int VideoWorkspace::kAudioAssetFieldNumber;
const int VideoWorkspace::kClippedRangesFieldNumber;
const int VideoWorkspace::kWorkspaceOutputWidthFieldNumber;
const int VideoWorkspace::kWorkspaceOutputHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoWorkspace::VideoWorkspace()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:whensunset.editorsdk.model.VideoWorkspace)
}

void VideoWorkspace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VideoWorkspace::VideoWorkspace(const VideoWorkspace& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:whensunset.editorsdk.model.VideoWorkspace)
}

void VideoWorkspace::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  work_space_id_ = GOOGLE_LONGLONG(0);
  workspace_output_width_ = 0;
  workspace_output_height_ = 0;
}

VideoWorkspace::~VideoWorkspace() {
  // @@protoc_insertion_point(destructor:whensunset.editorsdk.model.VideoWorkspace)
  SharedDtor();
}

void VideoWorkspace::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VideoWorkspace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoWorkspace& VideoWorkspace::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_editor_5fmodel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_editor_5fmodel_2eproto();
#endif
  return *default_instance_;
}

VideoWorkspace* VideoWorkspace::default_instance_ = NULL;

VideoWorkspace* VideoWorkspace::New(::google::protobuf::Arena* arena) const {
  VideoWorkspace* n = new VideoWorkspace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoWorkspace::Clear() {
// @@protoc_insertion_point(message_clear_start:whensunset.editorsdk.model.VideoWorkspace)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoWorkspace, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoWorkspace*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(workspace_output_width_, workspace_output_height_);
  work_space_id_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  video_asset_.Clear();
  audio_asset_.Clear();
  clipped_ranges_.Clear();
}

bool VideoWorkspace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:whensunset.editorsdk.model.VideoWorkspace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 work_space_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &work_space_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_video_asset;
        break;
      }

      // repeated .whensunset.editorsdk.model.VideoAsset video_asset = 2;
      case 2: {
        if (tag == 18) {
         parse_video_asset:
          DO_(input->IncrementRecursionDepth());
         parse_loop_video_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_video_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_video_asset;
        if (input->ExpectTag(26)) goto parse_loop_audio_asset;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .whensunset.editorsdk.model.AudioAsset audio_asset = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_audio_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_audio_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_audio_asset;
        if (input->ExpectTag(34)) goto parse_loop_clipped_ranges;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .whensunset.editorsdk.model.TimeRange clipped_ranges = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_clipped_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_clipped_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_clipped_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_workspace_output_width;
        break;
      }

      // optional int32 workspace_output_width = 5;
      case 5: {
        if (tag == 40) {
         parse_workspace_output_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workspace_output_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_workspace_output_height;
        break;
      }

      // optional int32 workspace_output_height = 6;
      case 6: {
        if (tag == 48) {
         parse_workspace_output_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workspace_output_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:whensunset.editorsdk.model.VideoWorkspace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:whensunset.editorsdk.model.VideoWorkspace)
  return false;
#undef DO_
}

void VideoWorkspace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:whensunset.editorsdk.model.VideoWorkspace)
  // optional int64 work_space_id = 1;
  if (this->work_space_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->work_space_id(), output);
  }

  // repeated .whensunset.editorsdk.model.VideoAsset video_asset = 2;
  for (unsigned int i = 0, n = this->video_asset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->video_asset(i), output);
  }

  // repeated .whensunset.editorsdk.model.AudioAsset audio_asset = 3;
  for (unsigned int i = 0, n = this->audio_asset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->audio_asset(i), output);
  }

  // repeated .whensunset.editorsdk.model.TimeRange clipped_ranges = 4;
  for (unsigned int i = 0, n = this->clipped_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->clipped_ranges(i), output);
  }

  // optional int32 workspace_output_width = 5;
  if (this->workspace_output_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->workspace_output_width(), output);
  }

  // optional int32 workspace_output_height = 6;
  if (this->workspace_output_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->workspace_output_height(), output);
  }

  // @@protoc_insertion_point(serialize_end:whensunset.editorsdk.model.VideoWorkspace)
}

int VideoWorkspace::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:whensunset.editorsdk.model.VideoWorkspace)
  int total_size = 0;

  // optional int64 work_space_id = 1;
  if (this->work_space_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->work_space_id());
  }

  // optional int32 workspace_output_width = 5;
  if (this->workspace_output_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workspace_output_width());
  }

  // optional int32 workspace_output_height = 6;
  if (this->workspace_output_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->workspace_output_height());
  }

  // repeated .whensunset.editorsdk.model.VideoAsset video_asset = 2;
  total_size += 1 * this->video_asset_size();
  for (int i = 0; i < this->video_asset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->video_asset(i));
  }

  // repeated .whensunset.editorsdk.model.AudioAsset audio_asset = 3;
  total_size += 1 * this->audio_asset_size();
  for (int i = 0; i < this->audio_asset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->audio_asset(i));
  }

  // repeated .whensunset.editorsdk.model.TimeRange clipped_ranges = 4;
  total_size += 1 * this->clipped_ranges_size();
  for (int i = 0; i < this->clipped_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clipped_ranges(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoWorkspace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoWorkspace*>(&from));
}

void VideoWorkspace::MergeFrom(const VideoWorkspace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whensunset.editorsdk.model.VideoWorkspace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  video_asset_.MergeFrom(from.video_asset_);
  audio_asset_.MergeFrom(from.audio_asset_);
  clipped_ranges_.MergeFrom(from.clipped_ranges_);
  if (from.work_space_id() != 0) {
    set_work_space_id(from.work_space_id());
  }
  if (from.workspace_output_width() != 0) {
    set_workspace_output_width(from.workspace_output_width());
  }
  if (from.workspace_output_height() != 0) {
    set_workspace_output_height(from.workspace_output_height());
  }
}

void VideoWorkspace::CopyFrom(const VideoWorkspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whensunset.editorsdk.model.VideoWorkspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoWorkspace::IsInitialized() const {

  return true;
}

void VideoWorkspace::Swap(VideoWorkspace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoWorkspace::InternalSwap(VideoWorkspace* other) {
  std::swap(work_space_id_, other->work_space_id_);
  video_asset_.UnsafeArenaSwap(&other->video_asset_);
  audio_asset_.UnsafeArenaSwap(&other->audio_asset_);
  clipped_ranges_.UnsafeArenaSwap(&other->clipped_ranges_);
  std::swap(workspace_output_width_, other->workspace_output_width_);
  std::swap(workspace_output_height_, other->workspace_output_height_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoWorkspace::GetTypeName() const {
  return "whensunset.editorsdk.model.VideoWorkspace";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoWorkspace

// optional int64 work_space_id = 1;
void VideoWorkspace::clear_work_space_id() {
  work_space_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 VideoWorkspace::work_space_id() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoWorkspace.work_space_id)
  return work_space_id_;
}
 void VideoWorkspace::set_work_space_id(::google::protobuf::int64 value) {
  
  work_space_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoWorkspace.work_space_id)
}

// repeated .whensunset.editorsdk.model.VideoAsset video_asset = 2;
int VideoWorkspace::video_asset_size() const {
  return video_asset_.size();
}
void VideoWorkspace::clear_video_asset() {
  video_asset_.Clear();
}
const ::whensunset::editorsdk::model::VideoAsset& VideoWorkspace::video_asset(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoWorkspace.video_asset)
  return video_asset_.Get(index);
}
::whensunset::editorsdk::model::VideoAsset* VideoWorkspace::mutable_video_asset(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoWorkspace.video_asset)
  return video_asset_.Mutable(index);
}
::whensunset::editorsdk::model::VideoAsset* VideoWorkspace::add_video_asset() {
  // @@protoc_insertion_point(field_add:whensunset.editorsdk.model.VideoWorkspace.video_asset)
  return video_asset_.Add();
}
::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::VideoAsset >*
VideoWorkspace::mutable_video_asset() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.editorsdk.model.VideoWorkspace.video_asset)
  return &video_asset_;
}
const ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::VideoAsset >&
VideoWorkspace::video_asset() const {
  // @@protoc_insertion_point(field_list:whensunset.editorsdk.model.VideoWorkspace.video_asset)
  return video_asset_;
}

// repeated .whensunset.editorsdk.model.AudioAsset audio_asset = 3;
int VideoWorkspace::audio_asset_size() const {
  return audio_asset_.size();
}
void VideoWorkspace::clear_audio_asset() {
  audio_asset_.Clear();
}
const ::whensunset::editorsdk::model::AudioAsset& VideoWorkspace::audio_asset(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoWorkspace.audio_asset)
  return audio_asset_.Get(index);
}
::whensunset::editorsdk::model::AudioAsset* VideoWorkspace::mutable_audio_asset(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoWorkspace.audio_asset)
  return audio_asset_.Mutable(index);
}
::whensunset::editorsdk::model::AudioAsset* VideoWorkspace::add_audio_asset() {
  // @@protoc_insertion_point(field_add:whensunset.editorsdk.model.VideoWorkspace.audio_asset)
  return audio_asset_.Add();
}
::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::AudioAsset >*
VideoWorkspace::mutable_audio_asset() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.editorsdk.model.VideoWorkspace.audio_asset)
  return &audio_asset_;
}
const ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::AudioAsset >&
VideoWorkspace::audio_asset() const {
  // @@protoc_insertion_point(field_list:whensunset.editorsdk.model.VideoWorkspace.audio_asset)
  return audio_asset_;
}

// repeated .whensunset.editorsdk.model.TimeRange clipped_ranges = 4;
int VideoWorkspace::clipped_ranges_size() const {
  return clipped_ranges_.size();
}
void VideoWorkspace::clear_clipped_ranges() {
  clipped_ranges_.Clear();
}
const ::whensunset::editorsdk::model::TimeRange& VideoWorkspace::clipped_ranges(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoWorkspace.clipped_ranges)
  return clipped_ranges_.Get(index);
}
::whensunset::editorsdk::model::TimeRange* VideoWorkspace::mutable_clipped_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoWorkspace.clipped_ranges)
  return clipped_ranges_.Mutable(index);
}
::whensunset::editorsdk::model::TimeRange* VideoWorkspace::add_clipped_ranges() {
  // @@protoc_insertion_point(field_add:whensunset.editorsdk.model.VideoWorkspace.clipped_ranges)
  return clipped_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::TimeRange >*
VideoWorkspace::mutable_clipped_ranges() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.editorsdk.model.VideoWorkspace.clipped_ranges)
  return &clipped_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::TimeRange >&
VideoWorkspace::clipped_ranges() const {
  // @@protoc_insertion_point(field_list:whensunset.editorsdk.model.VideoWorkspace.clipped_ranges)
  return clipped_ranges_;
}

// optional int32 workspace_output_width = 5;
void VideoWorkspace::clear_workspace_output_width() {
  workspace_output_width_ = 0;
}
 ::google::protobuf::int32 VideoWorkspace::workspace_output_width() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoWorkspace.workspace_output_width)
  return workspace_output_width_;
}
 void VideoWorkspace::set_workspace_output_width(::google::protobuf::int32 value) {
  
  workspace_output_width_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoWorkspace.workspace_output_width)
}

// optional int32 workspace_output_height = 6;
void VideoWorkspace::clear_workspace_output_height() {
  workspace_output_height_ = 0;
}
 ::google::protobuf::int32 VideoWorkspace::workspace_output_height() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoWorkspace.workspace_output_height)
  return workspace_output_height_;
}
 void VideoWorkspace::set_workspace_output_height(::google::protobuf::int32 value) {
  
  workspace_output_height_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoWorkspace.workspace_output_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace editorsdk
}  // namespace whensunset

// @@protoc_insertion_point(global_scope)
