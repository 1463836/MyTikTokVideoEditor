// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_model.proto

#ifndef PROTOBUF_editor_5fmodel_2eproto__INCLUDED
#define PROTOBUF_editor_5fmodel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace whensunset {
namespace editorsdk {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_editor_5fmodel_2eproto();
void protobuf_AssignDesc_editor_5fmodel_2eproto();
void protobuf_ShutdownFile_editor_5fmodel_2eproto();

class Color;
class FileHodler;
class MediaStreamHolder;
class TimeRange;
class VideoAsset;

enum AssetType {
  ASSET_TYPE_VIDEO = 0,
  ASSET_TYPE_SUB = 1,
  ASSET_TYPE_AUDIO = 2,
  AssetType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AssetType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AssetType_IsValid(int value);
const AssetType AssetType_MIN = ASSET_TYPE_VIDEO;
const AssetType AssetType_MAX = ASSET_TYPE_AUDIO;
const int AssetType_ARRAYSIZE = AssetType_MAX + 1;

// ===================================================================

class TimeRange : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.editorsdk.model.TimeRange) */ {
 public:
  TimeRange();
  virtual ~TimeRange();

  TimeRange(const TimeRange& from);

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }

  static const TimeRange& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TimeRange* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TimeRange* other);

  // implements Message ----------------------------------------------

  inline TimeRange* New() const { return New(NULL); }

  TimeRange* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TimeRange& from);
  void MergeFrom(const TimeRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  double start() const;
  void set_start(double value);

  // optional double duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  double duration() const;
  void set_duration(double value);

  // optional uint64 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.TimeRange)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  double start_;
  double duration_;
  ::google::protobuf::uint64 id_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto();
  #endif
  friend void protobuf_AssignDesc_editor_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_editor_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static TimeRange* default_instance_;
};
// -------------------------------------------------------------------

class MediaStreamHolder : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.editorsdk.model.MediaStreamHolder) */ {
 public:
  MediaStreamHolder();
  virtual ~MediaStreamHolder();

  MediaStreamHolder(const MediaStreamHolder& from);

  inline MediaStreamHolder& operator=(const MediaStreamHolder& from) {
    CopyFrom(from);
    return *this;
  }

  static const MediaStreamHolder& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MediaStreamHolder* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MediaStreamHolder* other);

  // implements Message ----------------------------------------------

  inline MediaStreamHolder* New() const { return New(NULL); }

  MediaStreamHolder* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MediaStreamHolder& from);
  void MergeFrom(const MediaStreamHolder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaStreamHolder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional string codec_type = 3;
  void clear_codec_type();
  static const int kCodecTypeFieldNumber = 3;
  const ::std::string& codec_type() const;
  void set_codec_type(const ::std::string& value);
  void set_codec_type(const char* value);
  void set_codec_type(const char* value, size_t size);
  ::std::string* mutable_codec_type();
  ::std::string* release_codec_type();
  void set_allocated_codec_type(::std::string* codec_type);

  // optional int32 rotation = 4;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  ::google::protobuf::int32 rotation() const;
  void set_rotation(::google::protobuf::int32 value);

  // optional int32 pix_format = 5;
  void clear_pix_format();
  static const int kPixFormatFieldNumber = 5;
  ::google::protobuf::int32 pix_format() const;
  void set_pix_format(::google::protobuf::int32 value);

  // optional int32 color_space = 6;
  void clear_color_space();
  static const int kColorSpaceFieldNumber = 6;
  ::google::protobuf::int32 color_space() const;
  void set_color_space(::google::protobuf::int32 value);

  // optional int32 color_range = 7;
  void clear_color_range();
  static const int kColorRangeFieldNumber = 7;
  ::google::protobuf::int32 color_range() const;
  void set_color_range(::google::protobuf::int32 value);

  // optional int64 bit_rate = 8;
  void clear_bit_rate();
  static const int kBitRateFieldNumber = 8;
  ::google::protobuf::int64 bit_rate() const;
  void set_bit_rate(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.MediaStreamHolder)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr codec_type_;
  ::google::protobuf::int32 rotation_;
  ::google::protobuf::int32 pix_format_;
  ::google::protobuf::int32 color_space_;
  ::google::protobuf::int32 color_range_;
  ::google::protobuf::int64 bit_rate_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto();
  #endif
  friend void protobuf_AssignDesc_editor_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_editor_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static MediaStreamHolder* default_instance_;
};
// -------------------------------------------------------------------

class FileHodler : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.editorsdk.model.FileHodler) */ {
 public:
  FileHodler();
  virtual ~FileHodler();

  FileHodler(const FileHodler& from);

  inline FileHodler& operator=(const FileHodler& from) {
    CopyFrom(from);
    return *this;
  }

  static const FileHodler& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FileHodler* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FileHodler* other);

  // implements Message ----------------------------------------------

  inline FileHodler* New() const { return New(NULL); }

  FileHodler* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FileHodler& from);
  void MergeFrom(const FileHodler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileHodler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string format_name = 2;
  void clear_format_name();
  static const int kFormatNameFieldNumber = 2;
  const ::std::string& format_name() const;
  void set_format_name(const ::std::string& value);
  void set_format_name(const char* value);
  void set_format_name(const char* value, size_t size);
  ::std::string* mutable_format_name();
  ::std::string* release_format_name();
  void set_allocated_format_name(::std::string* format_name);

  // optional int32 probe_score = 3;
  void clear_probe_score();
  static const int kProbeScoreFieldNumber = 3;
  ::google::protobuf::int32 probe_score() const;
  void set_probe_score(::google::protobuf::int32 value);

  // optional int32 num_streams = 4;
  void clear_num_streams();
  static const int kNumStreamsFieldNumber = 4;
  ::google::protobuf::int32 num_streams() const;
  void set_num_streams(::google::protobuf::int32 value);

  // repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;
  int streams_size() const;
  void clear_streams();
  static const int kStreamsFieldNumber = 5;
  const ::whensunset::editorsdk::model::MediaStreamHolder& streams(int index) const;
  ::whensunset::editorsdk::model::MediaStreamHolder* mutable_streams(int index);
  ::whensunset::editorsdk::model::MediaStreamHolder* add_streams();
  ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::MediaStreamHolder >*
      mutable_streams();
  const ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::MediaStreamHolder >&
      streams() const;

  // optional int32 video_strema_index = 6;
  void clear_video_strema_index();
  static const int kVideoStremaIndexFieldNumber = 6;
  ::google::protobuf::int32 video_strema_index() const;
  void set_video_strema_index(::google::protobuf::int32 value);

  // optional int32 audio_strema_index = 7;
  void clear_audio_strema_index();
  static const int kAudioStremaIndexFieldNumber = 7;
  ::google::protobuf::int32 audio_strema_index() const;
  void set_audio_strema_index(::google::protobuf::int32 value);

  // optional string video_comment = 9;
  void clear_video_comment();
  static const int kVideoCommentFieldNumber = 9;
  const ::std::string& video_comment() const;
  void set_video_comment(const ::std::string& value);
  void set_video_comment(const char* value);
  void set_video_comment(const char* value, size_t size);
  ::std::string* mutable_video_comment();
  ::std::string* release_video_comment();
  void set_allocated_video_comment(::std::string* video_comment);

  // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.FileHodler)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr format_name_;
  ::google::protobuf::int32 probe_score_;
  ::google::protobuf::int32 num_streams_;
  ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::MediaStreamHolder > streams_;
  ::google::protobuf::int32 video_strema_index_;
  ::google::protobuf::int32 audio_strema_index_;
  ::google::protobuf::internal::ArenaStringPtr video_comment_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto();
  #endif
  friend void protobuf_AssignDesc_editor_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_editor_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static FileHodler* default_instance_;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.editorsdk.model.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  static const Color& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Color* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  inline Color* New() const { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float red = 1;
  void clear_red();
  static const int kRedFieldNumber = 1;
  float red() const;
  void set_red(float value);

  // optional float green = 2;
  void clear_green();
  static const int kGreenFieldNumber = 2;
  float green() const;
  void set_green(float value);

  // optional float blue = 3;
  void clear_blue();
  static const int kBlueFieldNumber = 3;
  float blue() const;
  void set_blue(float value);

  // optional float alpha = 4;
  void clear_alpha();
  static const int kAlphaFieldNumber = 4;
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.Color)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  float red_;
  float green_;
  float blue_;
  float alpha_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto();
  #endif
  friend void protobuf_AssignDesc_editor_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_editor_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class VideoAsset : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:whensunset.editorsdk.model.VideoAsset) */ {
 public:
  VideoAsset();
  virtual ~VideoAsset();

  VideoAsset(const VideoAsset& from);

  inline VideoAsset& operator=(const VideoAsset& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoAsset& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VideoAsset* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VideoAsset* other);

  // implements Message ----------------------------------------------

  inline VideoAsset* New() const { return New(NULL); }

  VideoAsset* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VideoAsset& from);
  void MergeFrom(const VideoAsset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoAsset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 asset_id = 1;
  void clear_asset_id();
  static const int kAssetIdFieldNumber = 1;
  ::google::protobuf::uint64 asset_id() const;
  void set_asset_id(::google::protobuf::uint64 value);

  // optional string asset_path = 2;
  void clear_asset_path();
  static const int kAssetPathFieldNumber = 2;
  const ::std::string& asset_path() const;
  void set_asset_path(const ::std::string& value);
  void set_asset_path(const char* value);
  void set_asset_path(const char* value, size_t size);
  ::std::string* mutable_asset_path();
  ::std::string* release_asset_path();
  void set_allocated_asset_path(::std::string* asset_path);

  // optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;
  bool has_asset_video_file_hodler() const;
  void clear_asset_video_file_hodler();
  static const int kAssetVideoFileHodlerFieldNumber = 3;
  const ::whensunset::editorsdk::model::FileHodler& asset_video_file_hodler() const;
  ::whensunset::editorsdk::model::FileHodler* mutable_asset_video_file_hodler();
  ::whensunset::editorsdk::model::FileHodler* release_asset_video_file_hodler();
  void set_allocated_asset_video_file_hodler(::whensunset::editorsdk::model::FileHodler* asset_video_file_hodler);

  // optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
  bool has_clipped_time_range() const;
  void clear_clipped_time_range();
  static const int kClippedTimeRangeFieldNumber = 4;
  const ::whensunset::editorsdk::model::TimeRange& clipped_time_range() const;
  ::whensunset::editorsdk::model::TimeRange* mutable_clipped_time_range();
  ::whensunset::editorsdk::model::TimeRange* release_clipped_time_range();
  void set_allocated_clipped_time_range(::whensunset::editorsdk::model::TimeRange* clipped_time_range);

  // optional double speed = 5;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  double speed() const;
  void set_speed(double value);

  // optional double volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  double volume() const;
  void set_volume(double value);

  // optional string asset_audio_path = 7;
  void clear_asset_audio_path();
  static const int kAssetAudioPathFieldNumber = 7;
  const ::std::string& asset_audio_path() const;
  void set_asset_audio_path(const ::std::string& value);
  void set_asset_audio_path(const char* value);
  void set_asset_audio_path(const char* value, size_t size);
  ::std::string* mutable_asset_audio_path();
  ::std::string* release_asset_audio_path();
  void set_allocated_asset_audio_path(::std::string* asset_audio_path);

  // optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;
  bool has_asset_audio_file_hodler() const;
  void clear_asset_audio_file_hodler();
  static const int kAssetAudioFileHodlerFieldNumber = 8;
  const ::whensunset::editorsdk::model::FileHodler& asset_audio_file_hodler() const;
  ::whensunset::editorsdk::model::FileHodler* mutable_asset_audio_file_hodler();
  ::whensunset::editorsdk::model::FileHodler* release_asset_audio_file_hodler();
  void set_allocated_asset_audio_file_hodler(::whensunset::editorsdk::model::FileHodler* asset_audio_file_hodler);

  // optional bool is_reversed = 9;
  void clear_is_reversed();
  static const int kIsReversedFieldNumber = 9;
  bool is_reversed() const;
  void set_is_reversed(bool value);

  // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.VideoAsset)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint64 asset_id_;
  ::google::protobuf::internal::ArenaStringPtr asset_path_;
  ::whensunset::editorsdk::model::FileHodler* asset_video_file_hodler_;
  ::whensunset::editorsdk::model::TimeRange* clipped_time_range_;
  double speed_;
  double volume_;
  ::google::protobuf::internal::ArenaStringPtr asset_audio_path_;
  ::whensunset::editorsdk::model::FileHodler* asset_audio_file_hodler_;
  bool is_reversed_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_editor_5fmodel_2eproto();
  #endif
  friend void protobuf_AssignDesc_editor_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_editor_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static VideoAsset* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeRange

// optional double start = 1;
inline void TimeRange::clear_start() {
  start_ = 0;
}
inline double TimeRange::start() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.TimeRange.start)
  return start_;
}
inline void TimeRange::set_start(double value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.TimeRange.start)
}

// optional double duration = 2;
inline void TimeRange::clear_duration() {
  duration_ = 0;
}
inline double TimeRange::duration() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.TimeRange.duration)
  return duration_;
}
inline void TimeRange::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.TimeRange.duration)
}

// optional uint64 id = 3;
inline void TimeRange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimeRange::id() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.TimeRange.id)
  return id_;
}
inline void TimeRange::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.TimeRange.id)
}

// -------------------------------------------------------------------

// MediaStreamHolder

// optional int32 width = 1;
inline void MediaStreamHolder::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::width() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.width)
  return width_;
}
inline void MediaStreamHolder::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.width)
}

// optional int32 height = 2;
inline void MediaStreamHolder::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::height() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.height)
  return height_;
}
inline void MediaStreamHolder::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.height)
}

// optional string codec_type = 3;
inline void MediaStreamHolder::clear_codec_type() {
  codec_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaStreamHolder::codec_type() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
  return codec_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaStreamHolder::set_codec_type(const ::std::string& value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}
inline void MediaStreamHolder::set_codec_type(const char* value) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}
inline void MediaStreamHolder::set_codec_type(const char* value, size_t size) {
  
  codec_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}
inline ::std::string* MediaStreamHolder::mutable_codec_type() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
  return codec_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaStreamHolder::release_codec_type() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
  
  return codec_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaStreamHolder::set_allocated_codec_type(::std::string* codec_type) {
  if (codec_type != NULL) {
    
  } else {
    
  }
  codec_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec_type);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.MediaStreamHolder.codec_type)
}

// optional int32 rotation = 4;
inline void MediaStreamHolder::clear_rotation() {
  rotation_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::rotation() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.rotation)
  return rotation_;
}
inline void MediaStreamHolder::set_rotation(::google::protobuf::int32 value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.rotation)
}

// optional int32 pix_format = 5;
inline void MediaStreamHolder::clear_pix_format() {
  pix_format_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::pix_format() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.pix_format)
  return pix_format_;
}
inline void MediaStreamHolder::set_pix_format(::google::protobuf::int32 value) {
  
  pix_format_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.pix_format)
}

// optional int32 color_space = 6;
inline void MediaStreamHolder::clear_color_space() {
  color_space_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::color_space() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.color_space)
  return color_space_;
}
inline void MediaStreamHolder::set_color_space(::google::protobuf::int32 value) {
  
  color_space_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.color_space)
}

// optional int32 color_range = 7;
inline void MediaStreamHolder::clear_color_range() {
  color_range_ = 0;
}
inline ::google::protobuf::int32 MediaStreamHolder::color_range() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.color_range)
  return color_range_;
}
inline void MediaStreamHolder::set_color_range(::google::protobuf::int32 value) {
  
  color_range_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.color_range)
}

// optional int64 bit_rate = 8;
inline void MediaStreamHolder::clear_bit_rate() {
  bit_rate_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MediaStreamHolder::bit_rate() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.MediaStreamHolder.bit_rate)
  return bit_rate_;
}
inline void MediaStreamHolder::set_bit_rate(::google::protobuf::int64 value) {
  
  bit_rate_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.MediaStreamHolder.bit_rate)
}

// -------------------------------------------------------------------

// FileHodler

// optional string path = 1;
inline void FileHodler::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileHodler::path() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileHodler::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHodler.path)
}
inline void FileHodler::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.FileHodler.path)
}
inline void FileHodler::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.FileHodler.path)
}
inline ::std::string* FileHodler::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHodler.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileHodler::release_path() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.FileHodler.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileHodler::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.FileHodler.path)
}

// optional string format_name = 2;
inline void FileHodler::clear_format_name() {
  format_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileHodler::format_name() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.format_name)
  return format_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileHodler::set_format_name(const ::std::string& value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHodler.format_name)
}
inline void FileHodler::set_format_name(const char* value) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.FileHodler.format_name)
}
inline void FileHodler::set_format_name(const char* value, size_t size) {
  
  format_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.FileHodler.format_name)
}
inline ::std::string* FileHodler::mutable_format_name() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHodler.format_name)
  return format_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileHodler::release_format_name() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.FileHodler.format_name)
  
  return format_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileHodler::set_allocated_format_name(::std::string* format_name) {
  if (format_name != NULL) {
    
  } else {
    
  }
  format_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format_name);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.FileHodler.format_name)
}

// optional int32 probe_score = 3;
inline void FileHodler::clear_probe_score() {
  probe_score_ = 0;
}
inline ::google::protobuf::int32 FileHodler::probe_score() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.probe_score)
  return probe_score_;
}
inline void FileHodler::set_probe_score(::google::protobuf::int32 value) {
  
  probe_score_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHodler.probe_score)
}

// optional int32 num_streams = 4;
inline void FileHodler::clear_num_streams() {
  num_streams_ = 0;
}
inline ::google::protobuf::int32 FileHodler::num_streams() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.num_streams)
  return num_streams_;
}
inline void FileHodler::set_num_streams(::google::protobuf::int32 value) {
  
  num_streams_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHodler.num_streams)
}

// repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;
inline int FileHodler::streams_size() const {
  return streams_.size();
}
inline void FileHodler::clear_streams() {
  streams_.Clear();
}
inline const ::whensunset::editorsdk::model::MediaStreamHolder& FileHodler::streams(int index) const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.streams)
  return streams_.Get(index);
}
inline ::whensunset::editorsdk::model::MediaStreamHolder* FileHodler::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHodler.streams)
  return streams_.Mutable(index);
}
inline ::whensunset::editorsdk::model::MediaStreamHolder* FileHodler::add_streams() {
  // @@protoc_insertion_point(field_add:whensunset.editorsdk.model.FileHodler.streams)
  return streams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::MediaStreamHolder >*
FileHodler::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:whensunset.editorsdk.model.FileHodler.streams)
  return &streams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::whensunset::editorsdk::model::MediaStreamHolder >&
FileHodler::streams() const {
  // @@protoc_insertion_point(field_list:whensunset.editorsdk.model.FileHodler.streams)
  return streams_;
}

// optional int32 video_strema_index = 6;
inline void FileHodler::clear_video_strema_index() {
  video_strema_index_ = 0;
}
inline ::google::protobuf::int32 FileHodler::video_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.video_strema_index)
  return video_strema_index_;
}
inline void FileHodler::set_video_strema_index(::google::protobuf::int32 value) {
  
  video_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHodler.video_strema_index)
}

// optional int32 audio_strema_index = 7;
inline void FileHodler::clear_audio_strema_index() {
  audio_strema_index_ = 0;
}
inline ::google::protobuf::int32 FileHodler::audio_strema_index() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.audio_strema_index)
  return audio_strema_index_;
}
inline void FileHodler::set_audio_strema_index(::google::protobuf::int32 value) {
  
  audio_strema_index_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHodler.audio_strema_index)
}

// optional string video_comment = 9;
inline void FileHodler::clear_video_comment() {
  video_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileHodler::video_comment() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.FileHodler.video_comment)
  return video_comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileHodler::set_video_comment(const ::std::string& value) {
  
  video_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.FileHodler.video_comment)
}
inline void FileHodler::set_video_comment(const char* value) {
  
  video_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.FileHodler.video_comment)
}
inline void FileHodler::set_video_comment(const char* value, size_t size) {
  
  video_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.FileHodler.video_comment)
}
inline ::std::string* FileHodler::mutable_video_comment() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.FileHodler.video_comment)
  return video_comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileHodler::release_video_comment() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.FileHodler.video_comment)
  
  return video_comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileHodler::set_allocated_video_comment(::std::string* video_comment) {
  if (video_comment != NULL) {
    
  } else {
    
  }
  video_comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_comment);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.FileHodler.video_comment)
}

// -------------------------------------------------------------------

// Color

// optional float red = 1;
inline void Color::clear_red() {
  red_ = 0;
}
inline float Color::red() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.red)
  return red_;
}
inline void Color::set_red(float value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.red)
}

// optional float green = 2;
inline void Color::clear_green() {
  green_ = 0;
}
inline float Color::green() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.green)
  return green_;
}
inline void Color::set_green(float value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.green)
}

// optional float blue = 3;
inline void Color::clear_blue() {
  blue_ = 0;
}
inline float Color::blue() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.blue)
  return blue_;
}
inline void Color::set_blue(float value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.blue)
}

// optional float alpha = 4;
inline void Color::clear_alpha() {
  alpha_ = 0;
}
inline float Color::alpha() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.Color.alpha)
  return alpha_;
}
inline void Color::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.Color.alpha)
}

// -------------------------------------------------------------------

// VideoAsset

// optional uint64 asset_id = 1;
inline void VideoAsset::clear_asset_id() {
  asset_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VideoAsset::asset_id() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_id)
  return asset_id_;
}
inline void VideoAsset::set_asset_id(::google::protobuf::uint64 value) {
  
  asset_id_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.asset_id)
}

// optional string asset_path = 2;
inline void VideoAsset::clear_asset_path() {
  asset_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAsset::asset_path() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_path)
  return asset_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAsset::set_asset_path(const ::std::string& value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.asset_path)
}
inline void VideoAsset::set_asset_path(const char* value) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.VideoAsset.asset_path)
}
inline void VideoAsset::set_asset_path(const char* value, size_t size) {
  
  asset_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.VideoAsset.asset_path)
}
inline ::std::string* VideoAsset::mutable_asset_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_path)
  return asset_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAsset::release_asset_path() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_path)
  
  return asset_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAsset::set_allocated_asset_path(::std::string* asset_path) {
  if (asset_path != NULL) {
    
  } else {
    
  }
  asset_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_path)
}

// optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;
inline bool VideoAsset::has_asset_video_file_hodler() const {
  return !_is_default_instance_ && asset_video_file_hodler_ != NULL;
}
inline void VideoAsset::clear_asset_video_file_hodler() {
  if (GetArenaNoVirtual() == NULL && asset_video_file_hodler_ != NULL) delete asset_video_file_hodler_;
  asset_video_file_hodler_ = NULL;
}
inline const ::whensunset::editorsdk::model::FileHodler& VideoAsset::asset_video_file_hodler() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asset_video_file_hodler_ != NULL ? *asset_video_file_hodler_ : *default_instance().asset_video_file_hodler_;
#else
  return asset_video_file_hodler_ != NULL ? *asset_video_file_hodler_ : *default_instance_->asset_video_file_hodler_;
#endif
}
inline ::whensunset::editorsdk::model::FileHodler* VideoAsset::mutable_asset_video_file_hodler() {
  
  if (asset_video_file_hodler_ == NULL) {
    asset_video_file_hodler_ = new ::whensunset::editorsdk::model::FileHodler;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
  return asset_video_file_hodler_;
}
inline ::whensunset::editorsdk::model::FileHodler* VideoAsset::release_asset_video_file_hodler() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
  
  ::whensunset::editorsdk::model::FileHodler* temp = asset_video_file_hodler_;
  asset_video_file_hodler_ = NULL;
  return temp;
}
inline void VideoAsset::set_allocated_asset_video_file_hodler(::whensunset::editorsdk::model::FileHodler* asset_video_file_hodler) {
  delete asset_video_file_hodler_;
  asset_video_file_hodler_ = asset_video_file_hodler;
  if (asset_video_file_hodler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_video_file_hodler)
}

// optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;
inline bool VideoAsset::has_clipped_time_range() const {
  return !_is_default_instance_ && clipped_time_range_ != NULL;
}
inline void VideoAsset::clear_clipped_time_range() {
  if (GetArenaNoVirtual() == NULL && clipped_time_range_ != NULL) delete clipped_time_range_;
  clipped_time_range_ = NULL;
}
inline const ::whensunset::editorsdk::model::TimeRange& VideoAsset::clipped_time_range() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return clipped_time_range_ != NULL ? *clipped_time_range_ : *default_instance().clipped_time_range_;
#else
  return clipped_time_range_ != NULL ? *clipped_time_range_ : *default_instance_->clipped_time_range_;
#endif
}
inline ::whensunset::editorsdk::model::TimeRange* VideoAsset::mutable_clipped_time_range() {
  
  if (clipped_time_range_ == NULL) {
    clipped_time_range_ = new ::whensunset::editorsdk::model::TimeRange;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
  return clipped_time_range_;
}
inline ::whensunset::editorsdk::model::TimeRange* VideoAsset::release_clipped_time_range() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
  
  ::whensunset::editorsdk::model::TimeRange* temp = clipped_time_range_;
  clipped_time_range_ = NULL;
  return temp;
}
inline void VideoAsset::set_allocated_clipped_time_range(::whensunset::editorsdk::model::TimeRange* clipped_time_range) {
  delete clipped_time_range_;
  clipped_time_range_ = clipped_time_range;
  if (clipped_time_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.clipped_time_range)
}

// optional double speed = 5;
inline void VideoAsset::clear_speed() {
  speed_ = 0;
}
inline double VideoAsset::speed() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.speed)
  return speed_;
}
inline void VideoAsset::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.speed)
}

// optional double volume = 6;
inline void VideoAsset::clear_volume() {
  volume_ = 0;
}
inline double VideoAsset::volume() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.volume)
  return volume_;
}
inline void VideoAsset::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.volume)
}

// optional string asset_audio_path = 7;
inline void VideoAsset::clear_asset_audio_path() {
  asset_audio_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoAsset::asset_audio_path() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
  return asset_audio_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAsset::set_asset_audio_path(const ::std::string& value) {
  
  asset_audio_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}
inline void VideoAsset::set_asset_audio_path(const char* value) {
  
  asset_audio_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}
inline void VideoAsset::set_asset_audio_path(const char* value, size_t size) {
  
  asset_audio_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}
inline ::std::string* VideoAsset::mutable_asset_audio_path() {
  
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
  return asset_audio_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoAsset::release_asset_audio_path() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
  
  return asset_audio_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoAsset::set_allocated_asset_audio_path(::std::string* asset_audio_path) {
  if (asset_audio_path != NULL) {
    
  } else {
    
  }
  asset_audio_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_audio_path);
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_audio_path)
}

// optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;
inline bool VideoAsset::has_asset_audio_file_hodler() const {
  return !_is_default_instance_ && asset_audio_file_hodler_ != NULL;
}
inline void VideoAsset::clear_asset_audio_file_hodler() {
  if (GetArenaNoVirtual() == NULL && asset_audio_file_hodler_ != NULL) delete asset_audio_file_hodler_;
  asset_audio_file_hodler_ = NULL;
}
inline const ::whensunset::editorsdk::model::FileHodler& VideoAsset::asset_audio_file_hodler() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return asset_audio_file_hodler_ != NULL ? *asset_audio_file_hodler_ : *default_instance().asset_audio_file_hodler_;
#else
  return asset_audio_file_hodler_ != NULL ? *asset_audio_file_hodler_ : *default_instance_->asset_audio_file_hodler_;
#endif
}
inline ::whensunset::editorsdk::model::FileHodler* VideoAsset::mutable_asset_audio_file_hodler() {
  
  if (asset_audio_file_hodler_ == NULL) {
    asset_audio_file_hodler_ = new ::whensunset::editorsdk::model::FileHodler;
  }
  // @@protoc_insertion_point(field_mutable:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
  return asset_audio_file_hodler_;
}
inline ::whensunset::editorsdk::model::FileHodler* VideoAsset::release_asset_audio_file_hodler() {
  // @@protoc_insertion_point(field_release:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
  
  ::whensunset::editorsdk::model::FileHodler* temp = asset_audio_file_hodler_;
  asset_audio_file_hodler_ = NULL;
  return temp;
}
inline void VideoAsset::set_allocated_asset_audio_file_hodler(::whensunset::editorsdk::model::FileHodler* asset_audio_file_hodler) {
  delete asset_audio_file_hodler_;
  asset_audio_file_hodler_ = asset_audio_file_hodler;
  if (asset_audio_file_hodler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:whensunset.editorsdk.model.VideoAsset.asset_audio_file_hodler)
}

// optional bool is_reversed = 9;
inline void VideoAsset::clear_is_reversed() {
  is_reversed_ = false;
}
inline bool VideoAsset::is_reversed() const {
  // @@protoc_insertion_point(field_get:whensunset.editorsdk.model.VideoAsset.is_reversed)
  return is_reversed_;
}
inline void VideoAsset::set_is_reversed(bool value) {
  
  is_reversed_ = value;
  // @@protoc_insertion_point(field_set:whensunset.editorsdk.model.VideoAsset.is_reversed)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace editorsdk
}  // namespace whensunset

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::whensunset::editorsdk::model::AssetType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_editor_5fmodel_2eproto__INCLUDED
