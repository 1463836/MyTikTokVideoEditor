// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor_model.proto

package com.whensunset.mttvideoeditorsdk.model;

public final class EditorModel {
  private EditorModel() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * 素材的种类
   * </pre>
   *
   * Protobuf enum {@code whensunset.editorsdk.model.AssetType}
   */
  public enum AssetType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>ASSET_TYPE_VIDEO = 0;</code>
     */
    ASSET_TYPE_VIDEO(0),
    /**
     * <pre>
     * 以后会有贴纸、滤镜等等其他素材
     * </pre>
     *
     * <code>ASSET_TYPE_SUB = 1;</code>
     */
    ASSET_TYPE_SUB(1),
    /**
     * <code>ASSET_TYPE_AUDIO = 2;</code>
     */
    ASSET_TYPE_AUDIO(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ASSET_TYPE_VIDEO = 0;</code>
     */
    public static final int ASSET_TYPE_VIDEO_VALUE = 0;
    /**
     * <pre>
     * 以后会有贴纸、滤镜等等其他素材
     * </pre>
     *
     * <code>ASSET_TYPE_SUB = 1;</code>
     */
    public static final int ASSET_TYPE_SUB_VALUE = 1;
    /**
     * <code>ASSET_TYPE_AUDIO = 2;</code>
     */
    public static final int ASSET_TYPE_AUDIO_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AssetType valueOf(int value) {
      return forNumber(value);
    }

    public static AssetType forNumber(int value) {
      switch (value) {
        case 0: return ASSET_TYPE_VIDEO;
        case 1: return ASSET_TYPE_SUB;
        case 2: return ASSET_TYPE_AUDIO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AssetType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AssetType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AssetType>() {
            public AssetType findValueByNumber(int number) {
              return AssetType.forNumber(number);
            }
          };

    private final int value;

    private AssetType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:whensunset.editorsdk.model.AssetType)
  }

  public interface TimeRangeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:whensunset.editorsdk.model.TimeRange)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional double start = 1;</code>
     */
    double getStart();

    /**
     * <code>optional double duration = 2;</code>
     */
    double getDuration();

    /**
     * <code>optional uint64 id = 3;</code>
     */
    long getId();
  }
  /**
   * Protobuf type {@code whensunset.editorsdk.model.TimeRange}
   */
  public  static final class TimeRange extends
      com.google.protobuf.GeneratedMessageLite<
          TimeRange, TimeRange.Builder> implements
      // @@protoc_insertion_point(message_implements:whensunset.editorsdk.model.TimeRange)
      TimeRangeOrBuilder {
    private TimeRange() {
    }
    public static final int START_FIELD_NUMBER = 1;
    private double start_;
    /**
     * <code>optional double start = 1;</code>
     */
    public double getStart() {
      return start_;
    }
    /**
     * <code>optional double start = 1;</code>
     */
    private void setStart(double value) {
      
      start_ = value;
    }
    /**
     * <code>optional double start = 1;</code>
     */
    private void clearStart() {
      
      start_ = 0D;
    }

    public static final int DURATION_FIELD_NUMBER = 2;
    private double duration_;
    /**
     * <code>optional double duration = 2;</code>
     */
    public double getDuration() {
      return duration_;
    }
    /**
     * <code>optional double duration = 2;</code>
     */
    private void setDuration(double value) {
      
      duration_ = value;
    }
    /**
     * <code>optional double duration = 2;</code>
     */
    private void clearDuration() {
      
      duration_ = 0D;
    }

    public static final int ID_FIELD_NUMBER = 3;
    private long id_;
    /**
     * <code>optional uint64 id = 3;</code>
     */
    public long getId() {
      return id_;
    }
    /**
     * <code>optional uint64 id = 3;</code>
     */
    private void setId(long value) {
      
      id_ = value;
    }
    /**
     * <code>optional uint64 id = 3;</code>
     */
    private void clearId() {
      
      id_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (start_ != 0D) {
        output.writeDouble(1, start_);
      }
      if (duration_ != 0D) {
        output.writeDouble(2, duration_);
      }
      if (id_ != 0L) {
        output.writeUInt64(3, id_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (start_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, start_);
      }
      if (duration_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, duration_);
      }
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, id_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code whensunset.editorsdk.model.TimeRange}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange, Builder> implements
        // @@protoc_insertion_point(builder_implements:whensunset.editorsdk.model.TimeRange)
        com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRangeOrBuilder {
      // Construct using com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional double start = 1;</code>
       */
      public double getStart() {
        return instance.getStart();
      }
      /**
       * <code>optional double start = 1;</code>
       */
      public Builder setStart(double value) {
        copyOnWrite();
        instance.setStart(value);
        return this;
      }
      /**
       * <code>optional double start = 1;</code>
       */
      public Builder clearStart() {
        copyOnWrite();
        instance.clearStart();
        return this;
      }

      /**
       * <code>optional double duration = 2;</code>
       */
      public double getDuration() {
        return instance.getDuration();
      }
      /**
       * <code>optional double duration = 2;</code>
       */
      public Builder setDuration(double value) {
        copyOnWrite();
        instance.setDuration(value);
        return this;
      }
      /**
       * <code>optional double duration = 2;</code>
       */
      public Builder clearDuration() {
        copyOnWrite();
        instance.clearDuration();
        return this;
      }

      /**
       * <code>optional uint64 id = 3;</code>
       */
      public long getId() {
        return instance.getId();
      }
      /**
       * <code>optional uint64 id = 3;</code>
       */
      public Builder setId(long value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <code>optional uint64 id = 3;</code>
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:whensunset.editorsdk.model.TimeRange)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange other = (com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange) arg1;
          start_ = visitor.visitDouble(start_ != 0D, start_,
              other.start_ != 0D, other.start_);
          duration_ = visitor.visitDouble(duration_ != 0D, duration_,
              other.duration_ != 0D, other.duration_);
          id_ = visitor.visitLong(id_ != 0L, id_,
              other.id_ != 0L, other.id_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 9: {

                  start_ = input.readDouble();
                  break;
                }
                case 17: {

                  duration_ = input.readDouble();
                  break;
                }
                case 24: {

                  id_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.TimeRange)
    private static final com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TimeRange();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TimeRange> PARSER;

    public static com.google.protobuf.Parser<TimeRange> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface MediaStreamHolderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:whensunset.editorsdk.model.MediaStreamHolder)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * 视频的长和宽
     * </pre>
     *
     * <code>optional int32 width = 1;</code>
     */
    int getWidth();

    /**
     * <code>optional int32 height = 2;</code>
     */
    int getHeight();

    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    java.lang.String getCodecType();
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    com.google.protobuf.ByteString
        getCodecTypeBytes();

    /**
     * <pre>
     * 视频的旋转角度
     * </pre>
     *
     * <code>optional int32 rotation = 4;</code>
     */
    int getRotation();

    /**
     * <pre>
     * 视频像素的格式
     * </pre>
     *
     * <code>optional int32 pix_format = 5;</code>
     */
    int getPixFormat();

    /**
     * <pre>
     * 视频的色彩空间，rgb、yuv 等等
     * </pre>
     *
     * <code>optional int32 color_space = 6;</code>
     */
    int getColorSpace();

    /**
     * <pre>
     * 视频的色彩范围
     * </pre>
     *
     * <code>optional int32 color_range = 7;</code>
     */
    int getColorRange();

    /**
     * <pre>
     * 视频的 bit 流
     * </pre>
     *
     * <code>optional int64 bit_rate = 8;</code>
     */
    long getBitRate();
  }
  /**
   * <pre>
   * 一个多媒体文件的一个多媒体数据流的信息
   * </pre>
   *
   * Protobuf type {@code whensunset.editorsdk.model.MediaStreamHolder}
   */
  public  static final class MediaStreamHolder extends
      com.google.protobuf.GeneratedMessageLite<
          MediaStreamHolder, MediaStreamHolder.Builder> implements
      // @@protoc_insertion_point(message_implements:whensunset.editorsdk.model.MediaStreamHolder)
      MediaStreamHolderOrBuilder {
    private MediaStreamHolder() {
      codecType_ = "";
    }
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <pre>
     * 视频的长和宽
     * </pre>
     *
     * <code>optional int32 width = 1;</code>
     */
    public int getWidth() {
      return width_;
    }
    /**
     * <pre>
     * 视频的长和宽
     * </pre>
     *
     * <code>optional int32 width = 1;</code>
     */
    private void setWidth(int value) {
      
      width_ = value;
    }
    /**
     * <pre>
     * 视频的长和宽
     * </pre>
     *
     * <code>optional int32 width = 1;</code>
     */
    private void clearWidth() {
      
      width_ = 0;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>optional int32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }
    /**
     * <code>optional int32 height = 2;</code>
     */
    private void setHeight(int value) {
      
      height_ = value;
    }
    /**
     * <code>optional int32 height = 2;</code>
     */
    private void clearHeight() {
      
      height_ = 0;
    }

    public static final int CODEC_TYPE_FIELD_NUMBER = 3;
    private java.lang.String codecType_;
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    public java.lang.String getCodecType() {
      return codecType_;
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCodecTypeBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(codecType_);
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    private void setCodecType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      codecType_ = value;
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    private void clearCodecType() {
      
      codecType_ = getDefaultInstance().getCodecType();
    }
    /**
     * <pre>
     * 编解码器的名称
     * </pre>
     *
     * <code>optional string codec_type = 3;</code>
     */
    private void setCodecTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      codecType_ = value.toStringUtf8();
    }

    public static final int ROTATION_FIELD_NUMBER = 4;
    private int rotation_;
    /**
     * <pre>
     * 视频的旋转角度
     * </pre>
     *
     * <code>optional int32 rotation = 4;</code>
     */
    public int getRotation() {
      return rotation_;
    }
    /**
     * <pre>
     * 视频的旋转角度
     * </pre>
     *
     * <code>optional int32 rotation = 4;</code>
     */
    private void setRotation(int value) {
      
      rotation_ = value;
    }
    /**
     * <pre>
     * 视频的旋转角度
     * </pre>
     *
     * <code>optional int32 rotation = 4;</code>
     */
    private void clearRotation() {
      
      rotation_ = 0;
    }

    public static final int PIX_FORMAT_FIELD_NUMBER = 5;
    private int pixFormat_;
    /**
     * <pre>
     * 视频像素的格式
     * </pre>
     *
     * <code>optional int32 pix_format = 5;</code>
     */
    public int getPixFormat() {
      return pixFormat_;
    }
    /**
     * <pre>
     * 视频像素的格式
     * </pre>
     *
     * <code>optional int32 pix_format = 5;</code>
     */
    private void setPixFormat(int value) {
      
      pixFormat_ = value;
    }
    /**
     * <pre>
     * 视频像素的格式
     * </pre>
     *
     * <code>optional int32 pix_format = 5;</code>
     */
    private void clearPixFormat() {
      
      pixFormat_ = 0;
    }

    public static final int COLOR_SPACE_FIELD_NUMBER = 6;
    private int colorSpace_;
    /**
     * <pre>
     * 视频的色彩空间，rgb、yuv 等等
     * </pre>
     *
     * <code>optional int32 color_space = 6;</code>
     */
    public int getColorSpace() {
      return colorSpace_;
    }
    /**
     * <pre>
     * 视频的色彩空间，rgb、yuv 等等
     * </pre>
     *
     * <code>optional int32 color_space = 6;</code>
     */
    private void setColorSpace(int value) {
      
      colorSpace_ = value;
    }
    /**
     * <pre>
     * 视频的色彩空间，rgb、yuv 等等
     * </pre>
     *
     * <code>optional int32 color_space = 6;</code>
     */
    private void clearColorSpace() {
      
      colorSpace_ = 0;
    }

    public static final int COLOR_RANGE_FIELD_NUMBER = 7;
    private int colorRange_;
    /**
     * <pre>
     * 视频的色彩范围
     * </pre>
     *
     * <code>optional int32 color_range = 7;</code>
     */
    public int getColorRange() {
      return colorRange_;
    }
    /**
     * <pre>
     * 视频的色彩范围
     * </pre>
     *
     * <code>optional int32 color_range = 7;</code>
     */
    private void setColorRange(int value) {
      
      colorRange_ = value;
    }
    /**
     * <pre>
     * 视频的色彩范围
     * </pre>
     *
     * <code>optional int32 color_range = 7;</code>
     */
    private void clearColorRange() {
      
      colorRange_ = 0;
    }

    public static final int BIT_RATE_FIELD_NUMBER = 8;
    private long bitRate_;
    /**
     * <pre>
     * 视频的 bit 流
     * </pre>
     *
     * <code>optional int64 bit_rate = 8;</code>
     */
    public long getBitRate() {
      return bitRate_;
    }
    /**
     * <pre>
     * 视频的 bit 流
     * </pre>
     *
     * <code>optional int64 bit_rate = 8;</code>
     */
    private void setBitRate(long value) {
      
      bitRate_ = value;
    }
    /**
     * <pre>
     * 视频的 bit 流
     * </pre>
     *
     * <code>optional int64 bit_rate = 8;</code>
     */
    private void clearBitRate() {
      
      bitRate_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (width_ != 0) {
        output.writeInt32(1, width_);
      }
      if (height_ != 0) {
        output.writeInt32(2, height_);
      }
      if (!codecType_.isEmpty()) {
        output.writeString(3, getCodecType());
      }
      if (rotation_ != 0) {
        output.writeInt32(4, rotation_);
      }
      if (pixFormat_ != 0) {
        output.writeInt32(5, pixFormat_);
      }
      if (colorSpace_ != 0) {
        output.writeInt32(6, colorSpace_);
      }
      if (colorRange_ != 0) {
        output.writeInt32(7, colorRange_);
      }
      if (bitRate_ != 0L) {
        output.writeInt64(8, bitRate_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (width_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, width_);
      }
      if (height_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      if (!codecType_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getCodecType());
      }
      if (rotation_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, rotation_);
      }
      if (pixFormat_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, pixFormat_);
      }
      if (colorSpace_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, colorSpace_);
      }
      if (colorRange_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, colorRange_);
      }
      if (bitRate_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, bitRate_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * 一个多媒体文件的一个多媒体数据流的信息
     * </pre>
     *
     * Protobuf type {@code whensunset.editorsdk.model.MediaStreamHolder}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder, Builder> implements
        // @@protoc_insertion_point(builder_implements:whensunset.editorsdk.model.MediaStreamHolder)
        com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolderOrBuilder {
      // Construct using com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * 视频的长和宽
       * </pre>
       *
       * <code>optional int32 width = 1;</code>
       */
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       * 视频的长和宽
       * </pre>
       *
       * <code>optional int32 width = 1;</code>
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       * 视频的长和宽
       * </pre>
       *
       * <code>optional int32 width = 1;</code>
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <code>optional int32 height = 2;</code>
       */
      public int getHeight() {
        return instance.getHeight();
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      /**
       * <pre>
       * 编解码器的名称
       * </pre>
       *
       * <code>optional string codec_type = 3;</code>
       */
      public java.lang.String getCodecType() {
        return instance.getCodecType();
      }
      /**
       * <pre>
       * 编解码器的名称
       * </pre>
       *
       * <code>optional string codec_type = 3;</code>
       */
      public com.google.protobuf.ByteString
          getCodecTypeBytes() {
        return instance.getCodecTypeBytes();
      }
      /**
       * <pre>
       * 编解码器的名称
       * </pre>
       *
       * <code>optional string codec_type = 3;</code>
       */
      public Builder setCodecType(
          java.lang.String value) {
        copyOnWrite();
        instance.setCodecType(value);
        return this;
      }
      /**
       * <pre>
       * 编解码器的名称
       * </pre>
       *
       * <code>optional string codec_type = 3;</code>
       */
      public Builder clearCodecType() {
        copyOnWrite();
        instance.clearCodecType();
        return this;
      }
      /**
       * <pre>
       * 编解码器的名称
       * </pre>
       *
       * <code>optional string codec_type = 3;</code>
       */
      public Builder setCodecTypeBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCodecTypeBytes(value);
        return this;
      }

      /**
       * <pre>
       * 视频的旋转角度
       * </pre>
       *
       * <code>optional int32 rotation = 4;</code>
       */
      public int getRotation() {
        return instance.getRotation();
      }
      /**
       * <pre>
       * 视频的旋转角度
       * </pre>
       *
       * <code>optional int32 rotation = 4;</code>
       */
      public Builder setRotation(int value) {
        copyOnWrite();
        instance.setRotation(value);
        return this;
      }
      /**
       * <pre>
       * 视频的旋转角度
       * </pre>
       *
       * <code>optional int32 rotation = 4;</code>
       */
      public Builder clearRotation() {
        copyOnWrite();
        instance.clearRotation();
        return this;
      }

      /**
       * <pre>
       * 视频像素的格式
       * </pre>
       *
       * <code>optional int32 pix_format = 5;</code>
       */
      public int getPixFormat() {
        return instance.getPixFormat();
      }
      /**
       * <pre>
       * 视频像素的格式
       * </pre>
       *
       * <code>optional int32 pix_format = 5;</code>
       */
      public Builder setPixFormat(int value) {
        copyOnWrite();
        instance.setPixFormat(value);
        return this;
      }
      /**
       * <pre>
       * 视频像素的格式
       * </pre>
       *
       * <code>optional int32 pix_format = 5;</code>
       */
      public Builder clearPixFormat() {
        copyOnWrite();
        instance.clearPixFormat();
        return this;
      }

      /**
       * <pre>
       * 视频的色彩空间，rgb、yuv 等等
       * </pre>
       *
       * <code>optional int32 color_space = 6;</code>
       */
      public int getColorSpace() {
        return instance.getColorSpace();
      }
      /**
       * <pre>
       * 视频的色彩空间，rgb、yuv 等等
       * </pre>
       *
       * <code>optional int32 color_space = 6;</code>
       */
      public Builder setColorSpace(int value) {
        copyOnWrite();
        instance.setColorSpace(value);
        return this;
      }
      /**
       * <pre>
       * 视频的色彩空间，rgb、yuv 等等
       * </pre>
       *
       * <code>optional int32 color_space = 6;</code>
       */
      public Builder clearColorSpace() {
        copyOnWrite();
        instance.clearColorSpace();
        return this;
      }

      /**
       * <pre>
       * 视频的色彩范围
       * </pre>
       *
       * <code>optional int32 color_range = 7;</code>
       */
      public int getColorRange() {
        return instance.getColorRange();
      }
      /**
       * <pre>
       * 视频的色彩范围
       * </pre>
       *
       * <code>optional int32 color_range = 7;</code>
       */
      public Builder setColorRange(int value) {
        copyOnWrite();
        instance.setColorRange(value);
        return this;
      }
      /**
       * <pre>
       * 视频的色彩范围
       * </pre>
       *
       * <code>optional int32 color_range = 7;</code>
       */
      public Builder clearColorRange() {
        copyOnWrite();
        instance.clearColorRange();
        return this;
      }

      /**
       * <pre>
       * 视频的 bit 流
       * </pre>
       *
       * <code>optional int64 bit_rate = 8;</code>
       */
      public long getBitRate() {
        return instance.getBitRate();
      }
      /**
       * <pre>
       * 视频的 bit 流
       * </pre>
       *
       * <code>optional int64 bit_rate = 8;</code>
       */
      public Builder setBitRate(long value) {
        copyOnWrite();
        instance.setBitRate(value);
        return this;
      }
      /**
       * <pre>
       * 视频的 bit 流
       * </pre>
       *
       * <code>optional int64 bit_rate = 8;</code>
       */
      public Builder clearBitRate() {
        copyOnWrite();
        instance.clearBitRate();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:whensunset.editorsdk.model.MediaStreamHolder)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder other = (com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder) arg1;
          width_ = visitor.visitInt(width_ != 0, width_,
              other.width_ != 0, other.width_);
          height_ = visitor.visitInt(height_ != 0, height_,
              other.height_ != 0, other.height_);
          codecType_ = visitor.visitString(!codecType_.isEmpty(), codecType_,
              !other.codecType_.isEmpty(), other.codecType_);
          rotation_ = visitor.visitInt(rotation_ != 0, rotation_,
              other.rotation_ != 0, other.rotation_);
          pixFormat_ = visitor.visitInt(pixFormat_ != 0, pixFormat_,
              other.pixFormat_ != 0, other.pixFormat_);
          colorSpace_ = visitor.visitInt(colorSpace_ != 0, colorSpace_,
              other.colorSpace_ != 0, other.colorSpace_);
          colorRange_ = visitor.visitInt(colorRange_ != 0, colorRange_,
              other.colorRange_ != 0, other.colorRange_);
          bitRate_ = visitor.visitLong(bitRate_ != 0L, bitRate_,
              other.bitRate_ != 0L, other.bitRate_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  width_ = input.readInt32();
                  break;
                }
                case 16: {

                  height_ = input.readInt32();
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  codecType_ = s;
                  break;
                }
                case 32: {

                  rotation_ = input.readInt32();
                  break;
                }
                case 40: {

                  pixFormat_ = input.readInt32();
                  break;
                }
                case 48: {

                  colorSpace_ = input.readInt32();
                  break;
                }
                case 56: {

                  colorRange_ = input.readInt32();
                  break;
                }
                case 64: {

                  bitRate_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.MediaStreamHolder)
    private static final com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new MediaStreamHolder();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<MediaStreamHolder> PARSER;

    public static com.google.protobuf.Parser<MediaStreamHolder> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FileHodlerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:whensunset.editorsdk.model.FileHodler)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string path = 1;</code>
     */
    java.lang.String getPath();
    /**
     * <code>optional string path = 1;</code>
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    java.lang.String getFormatName();
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getFormatNameBytes();

    /**
     * <code>optional int32 probe_score = 3;</code>
     */
    int getProbeScore();

    /**
     * <pre>
     * 文件中的多媒体数据流的数量
     * </pre>
     *
     * <code>optional int32 num_streams = 4;</code>
     */
    int getNumStreams();

    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    java.util.List<com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder> 
        getStreamsList();
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder getStreams(int index);
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    int getStreamsCount();

    /**
     * <pre>
     * 文件中多媒体信息流中最优的视频流
     * </pre>
     *
     * <code>optional int32 video_strema_index = 6;</code>
     */
    int getVideoStremaIndex();

    /**
     * <pre>
     * 文件中多媒体信息流中最优的音频流
     * </pre>
     *
     * <code>optional int32 audio_strema_index = 7;</code>
     */
    int getAudioStremaIndex();

    /**
     * <code>optional string video_comment = 9;</code>
     */
    java.lang.String getVideoComment();
    /**
     * <code>optional string video_comment = 9;</code>
     */
    com.google.protobuf.ByteString
        getVideoCommentBytes();
  }
  /**
   * <pre>
   * 储存一个多媒体文件的信息，减少反复解析的性能消耗
   * </pre>
   *
   * Protobuf type {@code whensunset.editorsdk.model.FileHodler}
   */
  public  static final class FileHodler extends
      com.google.protobuf.GeneratedMessageLite<
          FileHodler, FileHodler.Builder> implements
      // @@protoc_insertion_point(message_implements:whensunset.editorsdk.model.FileHodler)
      FileHodlerOrBuilder {
    private FileHodler() {
      path_ = "";
      formatName_ = "";
      streams_ = emptyProtobufList();
      videoComment_ = "";
    }
    private int bitField0_;
    public static final int PATH_FIELD_NUMBER = 1;
    private java.lang.String path_;
    /**
     * <code>optional string path = 1;</code>
     */
    public java.lang.String getPath() {
      return path_;
    }
    /**
     * <code>optional string path = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(path_);
    }
    /**
     * <code>optional string path = 1;</code>
     */
    private void setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      path_ = value;
    }
    /**
     * <code>optional string path = 1;</code>
     */
    private void clearPath() {
      
      path_ = getDefaultInstance().getPath();
    }
    /**
     * <code>optional string path = 1;</code>
     */
    private void setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      path_ = value.toStringUtf8();
    }

    public static final int FORMAT_NAME_FIELD_NUMBER = 2;
    private java.lang.String formatName_;
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    public java.lang.String getFormatName() {
      return formatName_;
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFormatNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(formatName_);
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    private void setFormatName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      formatName_ = value;
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    private void clearFormatName() {
      
      formatName_ = getDefaultInstance().getFormatName();
    }
    /**
     * <pre>
     * 文件的后缀名
     * </pre>
     *
     * <code>optional string format_name = 2;</code>
     */
    private void setFormatNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      formatName_ = value.toStringUtf8();
    }

    public static final int PROBE_SCORE_FIELD_NUMBER = 3;
    private int probeScore_;
    /**
     * <code>optional int32 probe_score = 3;</code>
     */
    public int getProbeScore() {
      return probeScore_;
    }
    /**
     * <code>optional int32 probe_score = 3;</code>
     */
    private void setProbeScore(int value) {
      
      probeScore_ = value;
    }
    /**
     * <code>optional int32 probe_score = 3;</code>
     */
    private void clearProbeScore() {
      
      probeScore_ = 0;
    }

    public static final int NUM_STREAMS_FIELD_NUMBER = 4;
    private int numStreams_;
    /**
     * <pre>
     * 文件中的多媒体数据流的数量
     * </pre>
     *
     * <code>optional int32 num_streams = 4;</code>
     */
    public int getNumStreams() {
      return numStreams_;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的数量
     * </pre>
     *
     * <code>optional int32 num_streams = 4;</code>
     */
    private void setNumStreams(int value) {
      
      numStreams_ = value;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的数量
     * </pre>
     *
     * <code>optional int32 num_streams = 4;</code>
     */
    private void clearNumStreams() {
      
      numStreams_ = 0;
    }

    public static final int STREAMS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder> streams_;
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    public java.util.List<com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder> getStreamsList() {
      return streams_;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    public java.util.List<? extends com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolderOrBuilder> 
        getStreamsOrBuilderList() {
      return streams_;
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    public int getStreamsCount() {
      return streams_.size();
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    public com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder getStreams(int index) {
      return streams_.get(index);
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    public com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolderOrBuilder getStreamsOrBuilder(
        int index) {
      return streams_.get(index);
    }
    private void ensureStreamsIsMutable() {
      if (!streams_.isModifiable()) {
        streams_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(streams_);
       }
    }

    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void setStreams(
        int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureStreamsIsMutable();
      streams_.set(index, value);
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void setStreams(
        int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.Builder builderForValue) {
      ensureStreamsIsMutable();
      streams_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void addStreams(com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureStreamsIsMutable();
      streams_.add(value);
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void addStreams(
        int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureStreamsIsMutable();
      streams_.add(index, value);
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void addStreams(
        com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.Builder builderForValue) {
      ensureStreamsIsMutable();
      streams_.add(builderForValue.build());
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void addStreams(
        int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.Builder builderForValue) {
      ensureStreamsIsMutable();
      streams_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void addAllStreams(
        java.lang.Iterable<? extends com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder> values) {
      ensureStreamsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, streams_);
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void clearStreams() {
      streams_ = emptyProtobufList();
    }
    /**
     * <pre>
     * 文件中的多媒体数据流的信息列表
     * </pre>
     *
     * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
     */
    private void removeStreams(int index) {
      ensureStreamsIsMutable();
      streams_.remove(index);
    }

    public static final int VIDEO_STREMA_INDEX_FIELD_NUMBER = 6;
    private int videoStremaIndex_;
    /**
     * <pre>
     * 文件中多媒体信息流中最优的视频流
     * </pre>
     *
     * <code>optional int32 video_strema_index = 6;</code>
     */
    public int getVideoStremaIndex() {
      return videoStremaIndex_;
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的视频流
     * </pre>
     *
     * <code>optional int32 video_strema_index = 6;</code>
     */
    private void setVideoStremaIndex(int value) {
      
      videoStremaIndex_ = value;
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的视频流
     * </pre>
     *
     * <code>optional int32 video_strema_index = 6;</code>
     */
    private void clearVideoStremaIndex() {
      
      videoStremaIndex_ = 0;
    }

    public static final int AUDIO_STREMA_INDEX_FIELD_NUMBER = 7;
    private int audioStremaIndex_;
    /**
     * <pre>
     * 文件中多媒体信息流中最优的音频流
     * </pre>
     *
     * <code>optional int32 audio_strema_index = 7;</code>
     */
    public int getAudioStremaIndex() {
      return audioStremaIndex_;
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的音频流
     * </pre>
     *
     * <code>optional int32 audio_strema_index = 7;</code>
     */
    private void setAudioStremaIndex(int value) {
      
      audioStremaIndex_ = value;
    }
    /**
     * <pre>
     * 文件中多媒体信息流中最优的音频流
     * </pre>
     *
     * <code>optional int32 audio_strema_index = 7;</code>
     */
    private void clearAudioStremaIndex() {
      
      audioStremaIndex_ = 0;
    }

    public static final int VIDEO_COMMENT_FIELD_NUMBER = 9;
    private java.lang.String videoComment_;
    /**
     * <code>optional string video_comment = 9;</code>
     */
    public java.lang.String getVideoComment() {
      return videoComment_;
    }
    /**
     * <code>optional string video_comment = 9;</code>
     */
    public com.google.protobuf.ByteString
        getVideoCommentBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(videoComment_);
    }
    /**
     * <code>optional string video_comment = 9;</code>
     */
    private void setVideoComment(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      videoComment_ = value;
    }
    /**
     * <code>optional string video_comment = 9;</code>
     */
    private void clearVideoComment() {
      
      videoComment_ = getDefaultInstance().getVideoComment();
    }
    /**
     * <code>optional string video_comment = 9;</code>
     */
    private void setVideoCommentBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      videoComment_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!path_.isEmpty()) {
        output.writeString(1, getPath());
      }
      if (!formatName_.isEmpty()) {
        output.writeString(2, getFormatName());
      }
      if (probeScore_ != 0) {
        output.writeInt32(3, probeScore_);
      }
      if (numStreams_ != 0) {
        output.writeInt32(4, numStreams_);
      }
      for (int i = 0; i < streams_.size(); i++) {
        output.writeMessage(5, streams_.get(i));
      }
      if (videoStremaIndex_ != 0) {
        output.writeInt32(6, videoStremaIndex_);
      }
      if (audioStremaIndex_ != 0) {
        output.writeInt32(7, audioStremaIndex_);
      }
      if (!videoComment_.isEmpty()) {
        output.writeString(9, getVideoComment());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!path_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPath());
      }
      if (!formatName_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getFormatName());
      }
      if (probeScore_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, probeScore_);
      }
      if (numStreams_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, numStreams_);
      }
      for (int i = 0; i < streams_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, streams_.get(i));
      }
      if (videoStremaIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, videoStremaIndex_);
      }
      if (audioStremaIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, audioStremaIndex_);
      }
      if (!videoComment_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(9, getVideoComment());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * 储存一个多媒体文件的信息，减少反复解析的性能消耗
     * </pre>
     *
     * Protobuf type {@code whensunset.editorsdk.model.FileHodler}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler, Builder> implements
        // @@protoc_insertion_point(builder_implements:whensunset.editorsdk.model.FileHodler)
        com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodlerOrBuilder {
      // Construct using com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string path = 1;</code>
       */
      public java.lang.String getPath() {
        return instance.getPath();
      }
      /**
       * <code>optional string path = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        return instance.getPathBytes();
      }
      /**
       * <code>optional string path = 1;</code>
       */
      public Builder setPath(
          java.lang.String value) {
        copyOnWrite();
        instance.setPath(value);
        return this;
      }
      /**
       * <code>optional string path = 1;</code>
       */
      public Builder clearPath() {
        copyOnWrite();
        instance.clearPath();
        return this;
      }
      /**
       * <code>optional string path = 1;</code>
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPathBytes(value);
        return this;
      }

      /**
       * <pre>
       * 文件的后缀名
       * </pre>
       *
       * <code>optional string format_name = 2;</code>
       */
      public java.lang.String getFormatName() {
        return instance.getFormatName();
      }
      /**
       * <pre>
       * 文件的后缀名
       * </pre>
       *
       * <code>optional string format_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFormatNameBytes() {
        return instance.getFormatNameBytes();
      }
      /**
       * <pre>
       * 文件的后缀名
       * </pre>
       *
       * <code>optional string format_name = 2;</code>
       */
      public Builder setFormatName(
          java.lang.String value) {
        copyOnWrite();
        instance.setFormatName(value);
        return this;
      }
      /**
       * <pre>
       * 文件的后缀名
       * </pre>
       *
       * <code>optional string format_name = 2;</code>
       */
      public Builder clearFormatName() {
        copyOnWrite();
        instance.clearFormatName();
        return this;
      }
      /**
       * <pre>
       * 文件的后缀名
       * </pre>
       *
       * <code>optional string format_name = 2;</code>
       */
      public Builder setFormatNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFormatNameBytes(value);
        return this;
      }

      /**
       * <code>optional int32 probe_score = 3;</code>
       */
      public int getProbeScore() {
        return instance.getProbeScore();
      }
      /**
       * <code>optional int32 probe_score = 3;</code>
       */
      public Builder setProbeScore(int value) {
        copyOnWrite();
        instance.setProbeScore(value);
        return this;
      }
      /**
       * <code>optional int32 probe_score = 3;</code>
       */
      public Builder clearProbeScore() {
        copyOnWrite();
        instance.clearProbeScore();
        return this;
      }

      /**
       * <pre>
       * 文件中的多媒体数据流的数量
       * </pre>
       *
       * <code>optional int32 num_streams = 4;</code>
       */
      public int getNumStreams() {
        return instance.getNumStreams();
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的数量
       * </pre>
       *
       * <code>optional int32 num_streams = 4;</code>
       */
      public Builder setNumStreams(int value) {
        copyOnWrite();
        instance.setNumStreams(value);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的数量
       * </pre>
       *
       * <code>optional int32 num_streams = 4;</code>
       */
      public Builder clearNumStreams() {
        copyOnWrite();
        instance.clearNumStreams();
        return this;
      }

      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public java.util.List<com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder> getStreamsList() {
        return java.util.Collections.unmodifiableList(
            instance.getStreamsList());
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public int getStreamsCount() {
        return instance.getStreamsCount();
      }/**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder getStreams(int index) {
        return instance.getStreams(index);
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder setStreams(
          int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder value) {
        copyOnWrite();
        instance.setStreams(index, value);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder setStreams(
          int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.Builder builderForValue) {
        copyOnWrite();
        instance.setStreams(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder addStreams(com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder value) {
        copyOnWrite();
        instance.addStreams(value);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder addStreams(
          int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder value) {
        copyOnWrite();
        instance.addStreams(index, value);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder addStreams(
          com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.Builder builderForValue) {
        copyOnWrite();
        instance.addStreams(builderForValue);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder addStreams(
          int index, com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.Builder builderForValue) {
        copyOnWrite();
        instance.addStreams(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder addAllStreams(
          java.lang.Iterable<? extends com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder> values) {
        copyOnWrite();
        instance.addAllStreams(values);
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder clearStreams() {
        copyOnWrite();
        instance.clearStreams();
        return this;
      }
      /**
       * <pre>
       * 文件中的多媒体数据流的信息列表
       * </pre>
       *
       * <code>repeated .whensunset.editorsdk.model.MediaStreamHolder streams = 5;</code>
       */
      public Builder removeStreams(int index) {
        copyOnWrite();
        instance.removeStreams(index);
        return this;
      }

      /**
       * <pre>
       * 文件中多媒体信息流中最优的视频流
       * </pre>
       *
       * <code>optional int32 video_strema_index = 6;</code>
       */
      public int getVideoStremaIndex() {
        return instance.getVideoStremaIndex();
      }
      /**
       * <pre>
       * 文件中多媒体信息流中最优的视频流
       * </pre>
       *
       * <code>optional int32 video_strema_index = 6;</code>
       */
      public Builder setVideoStremaIndex(int value) {
        copyOnWrite();
        instance.setVideoStremaIndex(value);
        return this;
      }
      /**
       * <pre>
       * 文件中多媒体信息流中最优的视频流
       * </pre>
       *
       * <code>optional int32 video_strema_index = 6;</code>
       */
      public Builder clearVideoStremaIndex() {
        copyOnWrite();
        instance.clearVideoStremaIndex();
        return this;
      }

      /**
       * <pre>
       * 文件中多媒体信息流中最优的音频流
       * </pre>
       *
       * <code>optional int32 audio_strema_index = 7;</code>
       */
      public int getAudioStremaIndex() {
        return instance.getAudioStremaIndex();
      }
      /**
       * <pre>
       * 文件中多媒体信息流中最优的音频流
       * </pre>
       *
       * <code>optional int32 audio_strema_index = 7;</code>
       */
      public Builder setAudioStremaIndex(int value) {
        copyOnWrite();
        instance.setAudioStremaIndex(value);
        return this;
      }
      /**
       * <pre>
       * 文件中多媒体信息流中最优的音频流
       * </pre>
       *
       * <code>optional int32 audio_strema_index = 7;</code>
       */
      public Builder clearAudioStremaIndex() {
        copyOnWrite();
        instance.clearAudioStremaIndex();
        return this;
      }

      /**
       * <code>optional string video_comment = 9;</code>
       */
      public java.lang.String getVideoComment() {
        return instance.getVideoComment();
      }
      /**
       * <code>optional string video_comment = 9;</code>
       */
      public com.google.protobuf.ByteString
          getVideoCommentBytes() {
        return instance.getVideoCommentBytes();
      }
      /**
       * <code>optional string video_comment = 9;</code>
       */
      public Builder setVideoComment(
          java.lang.String value) {
        copyOnWrite();
        instance.setVideoComment(value);
        return this;
      }
      /**
       * <code>optional string video_comment = 9;</code>
       */
      public Builder clearVideoComment() {
        copyOnWrite();
        instance.clearVideoComment();
        return this;
      }
      /**
       * <code>optional string video_comment = 9;</code>
       */
      public Builder setVideoCommentBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVideoCommentBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:whensunset.editorsdk.model.FileHodler)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          streams_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler other = (com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler) arg1;
          path_ = visitor.visitString(!path_.isEmpty(), path_,
              !other.path_.isEmpty(), other.path_);
          formatName_ = visitor.visitString(!formatName_.isEmpty(), formatName_,
              !other.formatName_.isEmpty(), other.formatName_);
          probeScore_ = visitor.visitInt(probeScore_ != 0, probeScore_,
              other.probeScore_ != 0, other.probeScore_);
          numStreams_ = visitor.visitInt(numStreams_ != 0, numStreams_,
              other.numStreams_ != 0, other.numStreams_);
          streams_= visitor.visitList(streams_, other.streams_);
          videoStremaIndex_ = visitor.visitInt(videoStremaIndex_ != 0, videoStremaIndex_,
              other.videoStremaIndex_ != 0, other.videoStremaIndex_);
          audioStremaIndex_ = visitor.visitInt(audioStremaIndex_ != 0, audioStremaIndex_,
              other.audioStremaIndex_ != 0, other.audioStremaIndex_);
          videoComment_ = visitor.visitString(!videoComment_.isEmpty(), videoComment_,
              !other.videoComment_.isEmpty(), other.videoComment_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  path_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  formatName_ = s;
                  break;
                }
                case 24: {

                  probeScore_ = input.readInt32();
                  break;
                }
                case 32: {

                  numStreams_ = input.readInt32();
                  break;
                }
                case 42: {
                  if (!streams_.isModifiable()) {
                    streams_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(streams_);
                  }
                  streams_.add(
                      input.readMessage(com.whensunset.mttvideoeditorsdk.model.EditorModel.MediaStreamHolder.parser(), extensionRegistry));
                  break;
                }
                case 48: {

                  videoStremaIndex_ = input.readInt32();
                  break;
                }
                case 56: {

                  audioStremaIndex_ = input.readInt32();
                  break;
                }
                case 74: {
                  String s = input.readStringRequireUtf8();

                  videoComment_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.FileHodler)
    private static final com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FileHodler();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FileHodler> PARSER;

    public static com.google.protobuf.Parser<FileHodler> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ColorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:whensunset.editorsdk.model.Color)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional float red = 1;</code>
     */
    float getRed();

    /**
     * <code>optional float green = 2;</code>
     */
    float getGreen();

    /**
     * <code>optional float blue = 3;</code>
     */
    float getBlue();

    /**
     * <code>optional float alpha = 4;</code>
     */
    float getAlpha();
  }
  /**
   * Protobuf type {@code whensunset.editorsdk.model.Color}
   */
  public  static final class Color extends
      com.google.protobuf.GeneratedMessageLite<
          Color, Color.Builder> implements
      // @@protoc_insertion_point(message_implements:whensunset.editorsdk.model.Color)
      ColorOrBuilder {
    private Color() {
    }
    public static final int RED_FIELD_NUMBER = 1;
    private float red_;
    /**
     * <code>optional float red = 1;</code>
     */
    public float getRed() {
      return red_;
    }
    /**
     * <code>optional float red = 1;</code>
     */
    private void setRed(float value) {
      
      red_ = value;
    }
    /**
     * <code>optional float red = 1;</code>
     */
    private void clearRed() {
      
      red_ = 0F;
    }

    public static final int GREEN_FIELD_NUMBER = 2;
    private float green_;
    /**
     * <code>optional float green = 2;</code>
     */
    public float getGreen() {
      return green_;
    }
    /**
     * <code>optional float green = 2;</code>
     */
    private void setGreen(float value) {
      
      green_ = value;
    }
    /**
     * <code>optional float green = 2;</code>
     */
    private void clearGreen() {
      
      green_ = 0F;
    }

    public static final int BLUE_FIELD_NUMBER = 3;
    private float blue_;
    /**
     * <code>optional float blue = 3;</code>
     */
    public float getBlue() {
      return blue_;
    }
    /**
     * <code>optional float blue = 3;</code>
     */
    private void setBlue(float value) {
      
      blue_ = value;
    }
    /**
     * <code>optional float blue = 3;</code>
     */
    private void clearBlue() {
      
      blue_ = 0F;
    }

    public static final int ALPHA_FIELD_NUMBER = 4;
    private float alpha_;
    /**
     * <code>optional float alpha = 4;</code>
     */
    public float getAlpha() {
      return alpha_;
    }
    /**
     * <code>optional float alpha = 4;</code>
     */
    private void setAlpha(float value) {
      
      alpha_ = value;
    }
    /**
     * <code>optional float alpha = 4;</code>
     */
    private void clearAlpha() {
      
      alpha_ = 0F;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (red_ != 0F) {
        output.writeFloat(1, red_);
      }
      if (green_ != 0F) {
        output.writeFloat(2, green_);
      }
      if (blue_ != 0F) {
        output.writeFloat(3, blue_);
      }
      if (alpha_ != 0F) {
        output.writeFloat(4, alpha_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (red_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, red_);
      }
      if (green_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, green_);
      }
      if (blue_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, blue_);
      }
      if (alpha_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, alpha_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.whensunset.mttvideoeditorsdk.model.EditorModel.Color prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code whensunset.editorsdk.model.Color}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.whensunset.mttvideoeditorsdk.model.EditorModel.Color, Builder> implements
        // @@protoc_insertion_point(builder_implements:whensunset.editorsdk.model.Color)
        com.whensunset.mttvideoeditorsdk.model.EditorModel.ColorOrBuilder {
      // Construct using com.whensunset.mttvideoeditorsdk.model.EditorModel.Color.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional float red = 1;</code>
       */
      public float getRed() {
        return instance.getRed();
      }
      /**
       * <code>optional float red = 1;</code>
       */
      public Builder setRed(float value) {
        copyOnWrite();
        instance.setRed(value);
        return this;
      }
      /**
       * <code>optional float red = 1;</code>
       */
      public Builder clearRed() {
        copyOnWrite();
        instance.clearRed();
        return this;
      }

      /**
       * <code>optional float green = 2;</code>
       */
      public float getGreen() {
        return instance.getGreen();
      }
      /**
       * <code>optional float green = 2;</code>
       */
      public Builder setGreen(float value) {
        copyOnWrite();
        instance.setGreen(value);
        return this;
      }
      /**
       * <code>optional float green = 2;</code>
       */
      public Builder clearGreen() {
        copyOnWrite();
        instance.clearGreen();
        return this;
      }

      /**
       * <code>optional float blue = 3;</code>
       */
      public float getBlue() {
        return instance.getBlue();
      }
      /**
       * <code>optional float blue = 3;</code>
       */
      public Builder setBlue(float value) {
        copyOnWrite();
        instance.setBlue(value);
        return this;
      }
      /**
       * <code>optional float blue = 3;</code>
       */
      public Builder clearBlue() {
        copyOnWrite();
        instance.clearBlue();
        return this;
      }

      /**
       * <code>optional float alpha = 4;</code>
       */
      public float getAlpha() {
        return instance.getAlpha();
      }
      /**
       * <code>optional float alpha = 4;</code>
       */
      public Builder setAlpha(float value) {
        copyOnWrite();
        instance.setAlpha(value);
        return this;
      }
      /**
       * <code>optional float alpha = 4;</code>
       */
      public Builder clearAlpha() {
        copyOnWrite();
        instance.clearAlpha();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:whensunset.editorsdk.model.Color)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.whensunset.mttvideoeditorsdk.model.EditorModel.Color();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.whensunset.mttvideoeditorsdk.model.EditorModel.Color other = (com.whensunset.mttvideoeditorsdk.model.EditorModel.Color) arg1;
          red_ = visitor.visitFloat(red_ != 0F, red_,
              other.red_ != 0F, other.red_);
          green_ = visitor.visitFloat(green_ != 0F, green_,
              other.green_ != 0F, other.green_);
          blue_ = visitor.visitFloat(blue_ != 0F, blue_,
              other.blue_ != 0F, other.blue_);
          alpha_ = visitor.visitFloat(alpha_ != 0F, alpha_,
              other.alpha_ != 0F, other.alpha_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  red_ = input.readFloat();
                  break;
                }
                case 21: {

                  green_ = input.readFloat();
                  break;
                }
                case 29: {

                  blue_ = input.readFloat();
                  break;
                }
                case 37: {

                  alpha_ = input.readFloat();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.whensunset.mttvideoeditorsdk.model.EditorModel.Color.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.Color)
    private static final com.whensunset.mttvideoeditorsdk.model.EditorModel.Color DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Color();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.Color getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Color> PARSER;

    public static com.google.protobuf.Parser<Color> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VideoAssetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:whensunset.editorsdk.model.VideoAsset)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * 相同表示当前素材是同样的
     * </pre>
     *
     * <code>optional uint64 asset_id = 1;</code>
     */
    long getAssetId();

    /**
     * <code>optional string asset_path = 2;</code>
     */
    java.lang.String getAssetPath();
    /**
     * <code>optional string asset_path = 2;</code>
     */
    com.google.protobuf.ByteString
        getAssetPathBytes();

    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    boolean hasAssetVideoFileHodler();
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler getAssetVideoFileHodler();

    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    boolean hasClippedTimeRange();
    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange getClippedTimeRange();

    /**
     * <pre>
     * 视频的速度
     * </pre>
     *
     * <code>optional double speed = 5;</code>
     */
    double getSpeed();

    /**
     * <pre>
     * 视频声音大小
     * </pre>
     *
     * <code>optional double volume = 6;</code>
     */
    double getVolume();

    /**
     * <code>optional string asset_audio_path = 7;</code>
     */
    java.lang.String getAssetAudioPath();
    /**
     * <code>optional string asset_audio_path = 7;</code>
     */
    com.google.protobuf.ByteString
        getAssetAudioPathBytes();

    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    boolean hasAssetAudioFileHodler();
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler getAssetAudioFileHodler();

    /**
     * <code>optional bool is_reversed = 9;</code>
     */
    boolean getIsReversed();
  }
  /**
   * <pre>
   * 表示一个视频素材
   * </pre>
   *
   * Protobuf type {@code whensunset.editorsdk.model.VideoAsset}
   */
  public  static final class VideoAsset extends
      com.google.protobuf.GeneratedMessageLite<
          VideoAsset, VideoAsset.Builder> implements
      // @@protoc_insertion_point(message_implements:whensunset.editorsdk.model.VideoAsset)
      VideoAssetOrBuilder {
    private VideoAsset() {
      assetPath_ = "";
      assetAudioPath_ = "";
    }
    public static final int ASSET_ID_FIELD_NUMBER = 1;
    private long assetId_;
    /**
     * <pre>
     * 相同表示当前素材是同样的
     * </pre>
     *
     * <code>optional uint64 asset_id = 1;</code>
     */
    public long getAssetId() {
      return assetId_;
    }
    /**
     * <pre>
     * 相同表示当前素材是同样的
     * </pre>
     *
     * <code>optional uint64 asset_id = 1;</code>
     */
    private void setAssetId(long value) {
      
      assetId_ = value;
    }
    /**
     * <pre>
     * 相同表示当前素材是同样的
     * </pre>
     *
     * <code>optional uint64 asset_id = 1;</code>
     */
    private void clearAssetId() {
      
      assetId_ = 0L;
    }

    public static final int ASSET_PATH_FIELD_NUMBER = 2;
    private java.lang.String assetPath_;
    /**
     * <code>optional string asset_path = 2;</code>
     */
    public java.lang.String getAssetPath() {
      return assetPath_;
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAssetPathBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(assetPath_);
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    private void setAssetPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      assetPath_ = value;
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    private void clearAssetPath() {
      
      assetPath_ = getDefaultInstance().getAssetPath();
    }
    /**
     * <code>optional string asset_path = 2;</code>
     */
    private void setAssetPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      assetPath_ = value.toStringUtf8();
    }

    public static final int ASSET_VIDEO_FILE_HODLER_FIELD_NUMBER = 3;
    private com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler assetVideoFileHodler_;
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    public boolean hasAssetVideoFileHodler() {
      return assetVideoFileHodler_ != null;
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    public com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler getAssetVideoFileHodler() {
      return assetVideoFileHodler_ == null ? com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.getDefaultInstance() : assetVideoFileHodler_;
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    private void setAssetVideoFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
      if (value == null) {
        throw new NullPointerException();
      }
      assetVideoFileHodler_ = value;
      
      }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    private void setAssetVideoFileHodler(
        com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.Builder builderForValue) {
      assetVideoFileHodler_ = builderForValue.build();
      
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    private void mergeAssetVideoFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
      if (assetVideoFileHodler_ != null &&
          assetVideoFileHodler_ != com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.getDefaultInstance()) {
        assetVideoFileHodler_ =
          com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.newBuilder(assetVideoFileHodler_).mergeFrom(value).buildPartial();
      } else {
        assetVideoFileHodler_ = value;
      }
      
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
     */
    private void clearAssetVideoFileHodler() {  assetVideoFileHodler_ = null;
      
    }

    public static final int CLIPPED_TIME_RANGE_FIELD_NUMBER = 4;
    private com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange clippedTimeRange_;
    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    public boolean hasClippedTimeRange() {
      return clippedTimeRange_ != null;
    }
    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    public com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange getClippedTimeRange() {
      return clippedTimeRange_ == null ? com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.getDefaultInstance() : clippedTimeRange_;
    }
    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    private void setClippedTimeRange(com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange value) {
      if (value == null) {
        throw new NullPointerException();
      }
      clippedTimeRange_ = value;
      
      }
    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    private void setClippedTimeRange(
        com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.Builder builderForValue) {
      clippedTimeRange_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    private void mergeClippedTimeRange(com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange value) {
      if (clippedTimeRange_ != null &&
          clippedTimeRange_ != com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.getDefaultInstance()) {
        clippedTimeRange_ =
          com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.newBuilder(clippedTimeRange_).mergeFrom(value).buildPartial();
      } else {
        clippedTimeRange_ = value;
      }
      
    }
    /**
     * <pre>
     * 当前素材被剪裁的区域
     * </pre>
     *
     * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
     */
    private void clearClippedTimeRange() {  clippedTimeRange_ = null;
      
    }

    public static final int SPEED_FIELD_NUMBER = 5;
    private double speed_;
    /**
     * <pre>
     * 视频的速度
     * </pre>
     *
     * <code>optional double speed = 5;</code>
     */
    public double getSpeed() {
      return speed_;
    }
    /**
     * <pre>
     * 视频的速度
     * </pre>
     *
     * <code>optional double speed = 5;</code>
     */
    private void setSpeed(double value) {
      
      speed_ = value;
    }
    /**
     * <pre>
     * 视频的速度
     * </pre>
     *
     * <code>optional double speed = 5;</code>
     */
    private void clearSpeed() {
      
      speed_ = 0D;
    }

    public static final int VOLUME_FIELD_NUMBER = 6;
    private double volume_;
    /**
     * <pre>
     * 视频声音大小
     * </pre>
     *
     * <code>optional double volume = 6;</code>
     */
    public double getVolume() {
      return volume_;
    }
    /**
     * <pre>
     * 视频声音大小
     * </pre>
     *
     * <code>optional double volume = 6;</code>
     */
    private void setVolume(double value) {
      
      volume_ = value;
    }
    /**
     * <pre>
     * 视频声音大小
     * </pre>
     *
     * <code>optional double volume = 6;</code>
     */
    private void clearVolume() {
      
      volume_ = 0D;
    }

    public static final int ASSET_AUDIO_PATH_FIELD_NUMBER = 7;
    private java.lang.String assetAudioPath_;
    /**
     * <code>optional string asset_audio_path = 7;</code>
     */
    public java.lang.String getAssetAudioPath() {
      return assetAudioPath_;
    }
    /**
     * <code>optional string asset_audio_path = 7;</code>
     */
    public com.google.protobuf.ByteString
        getAssetAudioPathBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(assetAudioPath_);
    }
    /**
     * <code>optional string asset_audio_path = 7;</code>
     */
    private void setAssetAudioPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      assetAudioPath_ = value;
    }
    /**
     * <code>optional string asset_audio_path = 7;</code>
     */
    private void clearAssetAudioPath() {
      
      assetAudioPath_ = getDefaultInstance().getAssetAudioPath();
    }
    /**
     * <code>optional string asset_audio_path = 7;</code>
     */
    private void setAssetAudioPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      assetAudioPath_ = value.toStringUtf8();
    }

    public static final int ASSET_AUDIO_FILE_HODLER_FIELD_NUMBER = 8;
    private com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler assetAudioFileHodler_;
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    public boolean hasAssetAudioFileHodler() {
      return assetAudioFileHodler_ != null;
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    public com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler getAssetAudioFileHodler() {
      return assetAudioFileHodler_ == null ? com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.getDefaultInstance() : assetAudioFileHodler_;
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    private void setAssetAudioFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
      if (value == null) {
        throw new NullPointerException();
      }
      assetAudioFileHodler_ = value;
      
      }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    private void setAssetAudioFileHodler(
        com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.Builder builderForValue) {
      assetAudioFileHodler_ = builderForValue.build();
      
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    private void mergeAssetAudioFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
      if (assetAudioFileHodler_ != null &&
          assetAudioFileHodler_ != com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.getDefaultInstance()) {
        assetAudioFileHodler_ =
          com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.newBuilder(assetAudioFileHodler_).mergeFrom(value).buildPartial();
      } else {
        assetAudioFileHodler_ = value;
      }
      
    }
    /**
     * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
     */
    private void clearAssetAudioFileHodler() {  assetAudioFileHodler_ = null;
      
    }

    public static final int IS_REVERSED_FIELD_NUMBER = 9;
    private boolean isReversed_;
    /**
     * <code>optional bool is_reversed = 9;</code>
     */
    public boolean getIsReversed() {
      return isReversed_;
    }
    /**
     * <code>optional bool is_reversed = 9;</code>
     */
    private void setIsReversed(boolean value) {
      
      isReversed_ = value;
    }
    /**
     * <code>optional bool is_reversed = 9;</code>
     */
    private void clearIsReversed() {
      
      isReversed_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (assetId_ != 0L) {
        output.writeUInt64(1, assetId_);
      }
      if (!assetPath_.isEmpty()) {
        output.writeString(2, getAssetPath());
      }
      if (assetVideoFileHodler_ != null) {
        output.writeMessage(3, getAssetVideoFileHodler());
      }
      if (clippedTimeRange_ != null) {
        output.writeMessage(4, getClippedTimeRange());
      }
      if (speed_ != 0D) {
        output.writeDouble(5, speed_);
      }
      if (volume_ != 0D) {
        output.writeDouble(6, volume_);
      }
      if (!assetAudioPath_.isEmpty()) {
        output.writeString(7, getAssetAudioPath());
      }
      if (assetAudioFileHodler_ != null) {
        output.writeMessage(8, getAssetAudioFileHodler());
      }
      if (isReversed_ != false) {
        output.writeBool(9, isReversed_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (assetId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, assetId_);
      }
      if (!assetPath_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getAssetPath());
      }
      if (assetVideoFileHodler_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAssetVideoFileHodler());
      }
      if (clippedTimeRange_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getClippedTimeRange());
      }
      if (speed_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, speed_);
      }
      if (volume_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, volume_);
      }
      if (!assetAudioPath_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getAssetAudioPath());
      }
      if (assetAudioFileHodler_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getAssetAudioFileHodler());
      }
      if (isReversed_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isReversed_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * 表示一个视频素材
     * </pre>
     *
     * Protobuf type {@code whensunset.editorsdk.model.VideoAsset}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset, Builder> implements
        // @@protoc_insertion_point(builder_implements:whensunset.editorsdk.model.VideoAsset)
        com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAssetOrBuilder {
      // Construct using com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * 相同表示当前素材是同样的
       * </pre>
       *
       * <code>optional uint64 asset_id = 1;</code>
       */
      public long getAssetId() {
        return instance.getAssetId();
      }
      /**
       * <pre>
       * 相同表示当前素材是同样的
       * </pre>
       *
       * <code>optional uint64 asset_id = 1;</code>
       */
      public Builder setAssetId(long value) {
        copyOnWrite();
        instance.setAssetId(value);
        return this;
      }
      /**
       * <pre>
       * 相同表示当前素材是同样的
       * </pre>
       *
       * <code>optional uint64 asset_id = 1;</code>
       */
      public Builder clearAssetId() {
        copyOnWrite();
        instance.clearAssetId();
        return this;
      }

      /**
       * <code>optional string asset_path = 2;</code>
       */
      public java.lang.String getAssetPath() {
        return instance.getAssetPath();
      }
      /**
       * <code>optional string asset_path = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAssetPathBytes() {
        return instance.getAssetPathBytes();
      }
      /**
       * <code>optional string asset_path = 2;</code>
       */
      public Builder setAssetPath(
          java.lang.String value) {
        copyOnWrite();
        instance.setAssetPath(value);
        return this;
      }
      /**
       * <code>optional string asset_path = 2;</code>
       */
      public Builder clearAssetPath() {
        copyOnWrite();
        instance.clearAssetPath();
        return this;
      }
      /**
       * <code>optional string asset_path = 2;</code>
       */
      public Builder setAssetPathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAssetPathBytes(value);
        return this;
      }

      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
       */
      public boolean hasAssetVideoFileHodler() {
        return instance.hasAssetVideoFileHodler();
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
       */
      public com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler getAssetVideoFileHodler() {
        return instance.getAssetVideoFileHodler();
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
       */
      public Builder setAssetVideoFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
        copyOnWrite();
        instance.setAssetVideoFileHodler(value);
        return this;
        }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
       */
      public Builder setAssetVideoFileHodler(
          com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.Builder builderForValue) {
        copyOnWrite();
        instance.setAssetVideoFileHodler(builderForValue);
        return this;
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
       */
      public Builder mergeAssetVideoFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
        copyOnWrite();
        instance.mergeAssetVideoFileHodler(value);
        return this;
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_video_file_hodler = 3;</code>
       */
      public Builder clearAssetVideoFileHodler() {  copyOnWrite();
        instance.clearAssetVideoFileHodler();
        return this;
      }

      /**
       * <pre>
       * 当前素材被剪裁的区域
       * </pre>
       *
       * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
       */
      public boolean hasClippedTimeRange() {
        return instance.hasClippedTimeRange();
      }
      /**
       * <pre>
       * 当前素材被剪裁的区域
       * </pre>
       *
       * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
       */
      public com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange getClippedTimeRange() {
        return instance.getClippedTimeRange();
      }
      /**
       * <pre>
       * 当前素材被剪裁的区域
       * </pre>
       *
       * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
       */
      public Builder setClippedTimeRange(com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange value) {
        copyOnWrite();
        instance.setClippedTimeRange(value);
        return this;
        }
      /**
       * <pre>
       * 当前素材被剪裁的区域
       * </pre>
       *
       * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
       */
      public Builder setClippedTimeRange(
          com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.Builder builderForValue) {
        copyOnWrite();
        instance.setClippedTimeRange(builderForValue);
        return this;
      }
      /**
       * <pre>
       * 当前素材被剪裁的区域
       * </pre>
       *
       * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
       */
      public Builder mergeClippedTimeRange(com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange value) {
        copyOnWrite();
        instance.mergeClippedTimeRange(value);
        return this;
      }
      /**
       * <pre>
       * 当前素材被剪裁的区域
       * </pre>
       *
       * <code>optional .whensunset.editorsdk.model.TimeRange clipped_time_range = 4;</code>
       */
      public Builder clearClippedTimeRange() {  copyOnWrite();
        instance.clearClippedTimeRange();
        return this;
      }

      /**
       * <pre>
       * 视频的速度
       * </pre>
       *
       * <code>optional double speed = 5;</code>
       */
      public double getSpeed() {
        return instance.getSpeed();
      }
      /**
       * <pre>
       * 视频的速度
       * </pre>
       *
       * <code>optional double speed = 5;</code>
       */
      public Builder setSpeed(double value) {
        copyOnWrite();
        instance.setSpeed(value);
        return this;
      }
      /**
       * <pre>
       * 视频的速度
       * </pre>
       *
       * <code>optional double speed = 5;</code>
       */
      public Builder clearSpeed() {
        copyOnWrite();
        instance.clearSpeed();
        return this;
      }

      /**
       * <pre>
       * 视频声音大小
       * </pre>
       *
       * <code>optional double volume = 6;</code>
       */
      public double getVolume() {
        return instance.getVolume();
      }
      /**
       * <pre>
       * 视频声音大小
       * </pre>
       *
       * <code>optional double volume = 6;</code>
       */
      public Builder setVolume(double value) {
        copyOnWrite();
        instance.setVolume(value);
        return this;
      }
      /**
       * <pre>
       * 视频声音大小
       * </pre>
       *
       * <code>optional double volume = 6;</code>
       */
      public Builder clearVolume() {
        copyOnWrite();
        instance.clearVolume();
        return this;
      }

      /**
       * <code>optional string asset_audio_path = 7;</code>
       */
      public java.lang.String getAssetAudioPath() {
        return instance.getAssetAudioPath();
      }
      /**
       * <code>optional string asset_audio_path = 7;</code>
       */
      public com.google.protobuf.ByteString
          getAssetAudioPathBytes() {
        return instance.getAssetAudioPathBytes();
      }
      /**
       * <code>optional string asset_audio_path = 7;</code>
       */
      public Builder setAssetAudioPath(
          java.lang.String value) {
        copyOnWrite();
        instance.setAssetAudioPath(value);
        return this;
      }
      /**
       * <code>optional string asset_audio_path = 7;</code>
       */
      public Builder clearAssetAudioPath() {
        copyOnWrite();
        instance.clearAssetAudioPath();
        return this;
      }
      /**
       * <code>optional string asset_audio_path = 7;</code>
       */
      public Builder setAssetAudioPathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAssetAudioPathBytes(value);
        return this;
      }

      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
       */
      public boolean hasAssetAudioFileHodler() {
        return instance.hasAssetAudioFileHodler();
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
       */
      public com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler getAssetAudioFileHodler() {
        return instance.getAssetAudioFileHodler();
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
       */
      public Builder setAssetAudioFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
        copyOnWrite();
        instance.setAssetAudioFileHodler(value);
        return this;
        }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
       */
      public Builder setAssetAudioFileHodler(
          com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.Builder builderForValue) {
        copyOnWrite();
        instance.setAssetAudioFileHodler(builderForValue);
        return this;
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
       */
      public Builder mergeAssetAudioFileHodler(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler value) {
        copyOnWrite();
        instance.mergeAssetAudioFileHodler(value);
        return this;
      }
      /**
       * <code>optional .whensunset.editorsdk.model.FileHodler asset_audio_file_hodler = 8;</code>
       */
      public Builder clearAssetAudioFileHodler() {  copyOnWrite();
        instance.clearAssetAudioFileHodler();
        return this;
      }

      /**
       * <code>optional bool is_reversed = 9;</code>
       */
      public boolean getIsReversed() {
        return instance.getIsReversed();
      }
      /**
       * <code>optional bool is_reversed = 9;</code>
       */
      public Builder setIsReversed(boolean value) {
        copyOnWrite();
        instance.setIsReversed(value);
        return this;
      }
      /**
       * <code>optional bool is_reversed = 9;</code>
       */
      public Builder clearIsReversed() {
        copyOnWrite();
        instance.clearIsReversed();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:whensunset.editorsdk.model.VideoAsset)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset other = (com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset) arg1;
          assetId_ = visitor.visitLong(assetId_ != 0L, assetId_,
              other.assetId_ != 0L, other.assetId_);
          assetPath_ = visitor.visitString(!assetPath_.isEmpty(), assetPath_,
              !other.assetPath_.isEmpty(), other.assetPath_);
          assetVideoFileHodler_ = visitor.visitMessage(assetVideoFileHodler_, other.assetVideoFileHodler_);
          clippedTimeRange_ = visitor.visitMessage(clippedTimeRange_, other.clippedTimeRange_);
          speed_ = visitor.visitDouble(speed_ != 0D, speed_,
              other.speed_ != 0D, other.speed_);
          volume_ = visitor.visitDouble(volume_ != 0D, volume_,
              other.volume_ != 0D, other.volume_);
          assetAudioPath_ = visitor.visitString(!assetAudioPath_.isEmpty(), assetAudioPath_,
              !other.assetAudioPath_.isEmpty(), other.assetAudioPath_);
          assetAudioFileHodler_ = visitor.visitMessage(assetAudioFileHodler_, other.assetAudioFileHodler_);
          isReversed_ = visitor.visitBoolean(isReversed_ != false, isReversed_,
              other.isReversed_ != false, other.isReversed_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  assetId_ = input.readUInt64();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  assetPath_ = s;
                  break;
                }
                case 26: {
                  com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.Builder subBuilder = null;
                  if (assetVideoFileHodler_ != null) {
                    subBuilder = assetVideoFileHodler_.toBuilder();
                  }
                  assetVideoFileHodler_ = input.readMessage(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(assetVideoFileHodler_);
                    assetVideoFileHodler_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 34: {
                  com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.Builder subBuilder = null;
                  if (clippedTimeRange_ != null) {
                    subBuilder = clippedTimeRange_.toBuilder();
                  }
                  clippedTimeRange_ = input.readMessage(com.whensunset.mttvideoeditorsdk.model.EditorModel.TimeRange.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(clippedTimeRange_);
                    clippedTimeRange_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 41: {

                  speed_ = input.readDouble();
                  break;
                }
                case 49: {

                  volume_ = input.readDouble();
                  break;
                }
                case 58: {
                  String s = input.readStringRequireUtf8();

                  assetAudioPath_ = s;
                  break;
                }
                case 66: {
                  com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.Builder subBuilder = null;
                  if (assetAudioFileHodler_ != null) {
                    subBuilder = assetAudioFileHodler_.toBuilder();
                  }
                  assetAudioFileHodler_ = input.readMessage(com.whensunset.mttvideoeditorsdk.model.EditorModel.FileHodler.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(assetAudioFileHodler_);
                    assetAudioFileHodler_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 72: {

                  isReversed_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:whensunset.editorsdk.model.VideoAsset)
    private static final com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VideoAsset();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.whensunset.mttvideoeditorsdk.model.EditorModel.VideoAsset getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VideoAsset> PARSER;

    public static com.google.protobuf.Parser<VideoAsset> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
